;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Jiri Monitoring
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.monitor jazz


(import (jazz.event)
        (jazz.io)
        (jazz.ui)
        (jazz.view)
        (jiri.base)
        (jiri.settings)
        (jiri.structure)
        (jiri.window)
        (jiri.work))


;;;
;;;; Snapshots
;;;


(definition public (send-snapshot-reports monitor)
  (when monitor
    (let ((curl (curl-path)))
      (when (file-exists? curl)
        (continuation-capture
          (lambda (stop)
            (define (send-snapshot snapshot no total)
              (bind (file remote) snapshot
                (define (normalize-file file)
                  (let ((name (get-name file)))
                    (if (find name #\space)
                        (let ((brother-name (substitute #\space #\_ name)))
                          (let ((brother (new-brother file brother-name)))
                            (rename file brother)
                            brother))
                      file)))
                
                (let ((file (normalize-file file)))
                  (let ((port (open-process
                                (list
                                  path: curl
                                  arguments: (list "--silent" "-T" (parse file) "--limit-rate" "250K" "-H" "Content-Type: text/plain" (string-append remote "/" (get-name file)))
                                  show-console: #f))))
                    (set-title stage-view (format "Sending logs ({a} of {a})" no total))
                    (let ((status (process-status port)))
                      (cond ((= status 0)
                             ;; robust to file still in use
                             (catch (os-exception? exc)
                               (delete file)))
                            (else
                             (set-title stage-view (format "Sending logs error ({s})" status))
                             (continuation-return stop #f))))))))
            
            (define (send-snapshots snapshots total)
              (loop (for snapshot in snapshots)
                    (for no from 1)
                    (send-snapshot snapshot no total)))
            
            (define (collect-snapshots)
              (let ((queue (new-queue)))
                (for-each (lambda (info)
                            (when info
                              (bind (name dir remote) info
                                (let ((effective-dir (if (string? dir)
                                                         (dirname->directory (string-append (current-root-dir) dir))
                                                       dir)))
                                  (when (exists? effective-dir)
                                    (iterate-directory effective-dir
                                      (lambda (file)
                                        (when (extension=? (get-extension file) "report")
                                          (enqueue queue (list file remote))))
                                      files?: #t
                                      directories?: #f
                                      recursive?: #f))))))
                          monitor)
                (queue-list queue)))
            
            (let ((snapshots (collect-snapshots)))
              (let ((total (length snapshots)))
                (when (> total 0)
                  (send-snapshots snapshots total))))))))))


;;;
;;;; Curl
;;;


(cond-expand
  (windows
   (definition public (curl-path)
     (parse {File Build "curl.exe"})))
  (else
   (definition public (curl-path)
     "/usr/bin/curl"))))

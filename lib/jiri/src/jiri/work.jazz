;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Work
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.work jazz


(import (jazz.event)
        (jazz.geometry)
        (jazz.graphic)
        (jazz.snapshot)
        (jazz.tree)
        (jazz.view)
        (jazz.window)
        (jiri.base)
        (jiri.font)
        (jiri.manage)
        (jiri.platform)
        (jiri.section)
        (jiri.settings)
        (jiri.structure)
        (jiri.task)
        (jiri.view)
        (jiri.window))


;; TODO
;; - When Marc has fixed the FFI error problem, replace the global error-handler by a catcher
;;   to ward against recursive errors
;; - A potential problem can occur when I push a new release because pushing to both app and
;;   world is not atomic. This can be alleviated a bit by a script to push a release pushing
;;   both repositories rapidly maybe even in parallel
;; - Install could pass info to the app of what was the last head so that we could show
;;   only what changed since last time by having a what's new system indexed by commit!?
;; - Need a clean solution to an update needing to do 'setup' job like install a new shortcut

;; RELEASE
;; Install
;;   - b
;;   - cd release/install
;;   - commit and push changes
;; Setup
;;   - i
;;   - m
;;   - publish setup

;; SCENARIO
;; - Setup : clone install, delegate Install
;; - Launch : delegate Current
;; - Current direct : incorrect
;; - Current from Launch : pull install, if newer delegate Install else pull app/data
;; - Install from Setup : clone app/data
;; - Install from Current : pull app/data
;; - Install direct : incorrect
;; - App : incorrect but could be correct when version is validated with server

;; WINDOWS
;; - app
;;   - yownu
;;     - .git
;;     - Yownu.exe
;;     - lib
;;   - yownu-debug
;; - install
;;   - current
;;     - Install.exe
;;     - libgit2.dll
;;     - lib
;;   - yownu-install
;;     - .git
;;     - Install.exe
;;     - Launch.exe
;;     - Uninstall.exe
;;     - libgit2.dll
;;     - lib
;; - worlds
;;   - yownu
;;     - .git
;; Yownu.exe
;; lib


;;;
;;;; Root
;;;


(definition public root-view
  (new Jiri-Root
    position: (new Point 0 0)
    size: (new Dimension 850 550)))


;;;
;;;; Invite
;;;


(definition public invite-view
  (new Jiri-Title
    title: (jiri-invite)
    position: (new Point 30 18)
    size: (new Dimension 420 82)))


;;;
;;;; Minimize
;;;


(definition public minimize-view
  (new Jiri-Minimize
    position: (new Point 792 9)
    size: (new Dimension 22 22)))


;;;
;;;; Close
;;;


(definition public close-view
  (new Jiri-Close
    position: (new Point 819 9)
    size: (new Dimension 22 22)))


;;;
;;;; Connections
;;;


(class Jiri-Connections extends Jiri-Tree
  
  
  (method package (on-selection-change self evt)
    (let ((tree (get-sender evt)))
      (let ((selection (get-single-selection tree)))
        (let ((row (get-row tree selection)))
          (let ((connection (get-user-data row)))
            (when connection-change
              (connection-change connection))))))))


(definition public connections-view
  (new Jiri-Connections
    background: {Color Black alpha: 0.2}
    position: (new Point 24 118)
    size: (new Dimension 175 300)))


(definition connection-change
  #f)

(definition protected (set-connection-change proc)
  (set! connection-change proc))


;;;
;;;; Crashes
;;;


(definition public crashes-color
  {Color red: 0 green: 150 blue: 0})


(definition public crashes-view
  (new Jiri-Label
    title: ""
    font: default-label-font
    position: (new Point 350 446)
    size: (new Dimension 300 30)))


(definition public (add-crashes-view title color)
  (add-pane-view crashes-view)
  (set-title crashes-view title)
  (set-color crashes-view color)
  (set-font crashes-view {Font font-name: tahoma point-size: 20 hint-style: full})
  (set-justification crashes-view 'tail))


(definition public (update-crashes-view-color)
  (set-color crashes-view (get-color stage-view)))


;;;
;;;; Stage
;;;


(definition public stage-setup-color
  {Color red: 175 green: 0 blue: 0})

(definition public stage-install-color
  {Color red: 185 green: 100 blue: 0})

(definition public stage-ready-color
  {Color red: 0 green: 150 blue: 0})

(definition public stage-error-color
  {Color red: 175 green: 0 blue: 0})


(when (jiri-splash-section)
  (set! stage-setup-color stage-ready-color)
  (set! stage-install-color stage-ready-color))


(definition public stage-view
  (new Jiri-Label
    title: ""
    font: default-label-font
    position: (new Point 49 446)
    size: (new Dimension 600 30)))


(definition public (add-stage-view title color)
  (add-pane-view stage-view)
  (set-title stage-view title)
  (set-color stage-view color)
  (set-font stage-view {Font font-name: tahoma point-size: 20 hint-style: full}))


;;;
;;;; Percentage
;;;


(class Jiri-Percentage extends Jiri-Label
  
  
  (method override (label-title self)
    (let ((percentage 0.))
      (for-each-task-info
        (lambda (task step from to)
          (increase! percentage (* (- to from) (progress-done task)))))
      (string-append (number->string (fxround (* percentage 100.))) "%"))))


(definition public percentage-view
  (new Jiri-Percentage
    title: "0%"
    font: default-label-font
    position: (new Point 51 477)
    size: (new Dimension 115 20)))


;;;
;;;; Downloaded
;;;


(class Jiri-Downloaded extends Jiri-Label
  
  
  (method override (label-title self)
    (let ((downloaded (calculate-downloaded)))
      (if (not downloaded)
          "Downloaded: "
        (string-append "Downloaded: " (number->string (+ work-downloaded downloaded)) "M")))))


(definition public downloaded-view
  (new Jiri-Downloaded
    font: default-label-font
    position: (new Point 175 477)
    size: (new Dimension 160 20)))


;;;
;;;; Status
;;;


(class Jiri-Status extends Jiri-Label
  
  
  ;; minimize flicker
  (definition last-title
    #f)
  
  
  (method override (label-title self)
    (let ((title
            (let ((of (count-tasks)))
              (if (= of 0)
                  ""
                (let ((info (current-task-info)))
                  (if (not info)
                      "Done"
                    (bind (task step from to) info
                      (if (not (get-status task))
                          (or last-title "")
                        (string-append (get-status task) " (" (number->string (+ step 1)) "/" (number->string of) ")")))))))))
      (set! last-title title)
      title)))


(definition public status-view
  (new Jiri-Status
    title: ""
    font: default-label-font
    position: (new Point 345 477)
    size: (new Dimension 145 20)
    justification: 'tail))


;;;
;;;; Remaining
;;;


(class Jiri-Remaining extends Jiri-Label
  
  
  (method override (label-title self)
    (let ((remaining (calculate-remaining)))
      (if (not remaining)
          "Remaining: "
        (string-append "Remaining: " (number->string remaining))))))


(definition public remaining-view
  (new Jiri-Remaining
    font: default-label-font
    position: (new Point 500 477)
    size: (new Dimension 150 20)
    justification: 'tail))


;;;
;;;; Progress
;;;


(definition public progress-view
  (new Jiri-Progress
    position: (new Point 50 498)
    size: (new Dimension 600 20)))


;;;
;;;; Task
;;;


(definition protected (invalidate-task task)
  (invalidate-view percentage-view)
  (invalidate-view downloaded-view)
  (invalidate-view status-view)
  (invalidate-view remaining-view)
  (invalidate-view progress-view)
  (set-enabled? play-view (all-tasks-done?)))


(set-task-invalidater invalidate-task)


;;;
;;;; Play
;;;


(definition public play-view
  (new Jiri-Button
    title: (or (jiri-play) "Play")
    position: (new Point 680 478)
    size: (new Dimension 135 40)
    enabled?: #f
    action-handler: (lambda (view)
                      (play-app))))


;;;
;;;; Installation
;;;


(cond-expand
  (windows
   (definition public (uninstall-subkey)
     (string-append "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\" (jiri-title)))
   
   
   (definition public (desktop-shortcut)
     (let ((desktop (get-special-folder CSIDL_DESKTOPDIRECTORY)))
       (string-append desktop "/" (jiri-title) ".lnk")))
   
   
   (definition public (start-menu-appdir)
     (let ((startdir (get-special-folder CSIDL_STARTMENU)))
       (string-append startdir "/Programs/" (jiri-title))))
   
   
   (definition public (start-menu-shortcut appdir)
     (string-append appdir "/" (jiri-title) ".lnk")))
  (else))


;;;
;;;; Play
;;;


(definition public (play-app)
  (set-cursor :wait)
  (let ((arguments
          (build-arguments
            (lambda (add)
              (add "called-from" "installer")))))
    (delegate-process (app-exe) arguments: arguments))
  (quit-callback))


;;;
;;;; Error
;;;


(definition protected (continuable-error reason)
  (snapshot-process reason: reason))


;;;
;;;; Abort
;;;


(define abort-requested
  #f)


(definition public (set-abort-requested abort)
  (set! abort-requested abort))


(definition protected (safe-abort-point cleanup)
  (and abort-requested
       (begin
         (cleanup)
         (when (not (work-in-progress?))
           (abort-requested))
         #t))))

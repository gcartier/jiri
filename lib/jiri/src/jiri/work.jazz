;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Work
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.work jazz


(import (jazz.geometry)
        (jiri.base)
        (jiri.manage)
        (jiri.section)
        (jiri.settings)
        (jiri.structure)
        (jiri.task)
        (jiri.view)
        (jiri.window))


;; TODO
;; - When Marc has fixed the FFI error problem, replace the global error-handler by a catcher
;;   to ward against recursive errors
;; - A potential problem can occur when I push a new release because pushing to both app and
;;   world is not atomic. This can be alleviated a bit by a script to push a release pushing
;;   both repositories rapidly maybe even in parallel
;; - Install could pass info to the app of what was the last head so that we could show
;;   only what changed since last time by having a what's new system indexed by commit!?


;;;
;;;; Invite
;;;


(definition public (invite-view)
  (new Jiri-Title
    title: (jiri-invite)
    position: (new Point 30 18)
    size: (new Dimension 420 82)))


;;;
;;;; Minimize
;;;


(definition public minimize-view
  (new Jiri-Minimize
    position: (new Point 792 9)
    size: (new Dimension 22 22)))


;;;
;;;; Close
;;;


(definition public close-view
  (new Jiri-Close
    position: (new Point 819 9)
    size: (new Dimension 22 22)))


;;;
;;;; Stage
;;;


(definition public stage-setup-color
  '(.686 .000 .000 1.))

(definition public stage-install-color
  '(.763 .414 .004 1.))

(definition public stage-ready-color
  '(.000 .588 .000 1.))

(definition public stage-error-color
  '(.686 .000 .000 1.))


(definition public stage-view
  (new Jiri-Label
    title: ""
    font: default-label-font
    position: (new Point 49 446)
    size: (new Dimension 600 30)))


(definition public (add-stage-view color)
  (add-pane-view stage-view)
  (set-color stage-view color)
  (set-font stage-view '("Tahoma" 20)))


;;;
;;;; Percentage
;;;


(class Jiri-Percentage extends Jiri-Label
  
  
  (method override (label-title self)
    (let ((progress 0.))
      (for-each-task-info
        (lambda (task step from to)
          (increase! progress (* (- to from) (progress-done task)))))
      (let ((progress (min progress 1.)))
        (string-append (number->string (fxround (* progress 100.))) "%")))))


(definition public percentage-view
  (new Jiri-Percentage
    title: "0%"
    font: default-label-font
    position: (new Point 51 477)
    size: (new Dimension 115 20)))


;;;
;;;; Downloaded
;;;


(class Jiri-Downloaded extends Jiri-Label
  
  
  (method override (label-title self)
    (let ((downloaded (calculate-downloaded)))
      (if (not downloaded)
          "Downloaded: "
        (string-append "Downloaded: " (number->string (+ work-downloaded downloaded)) "M")))))


(definition public downloaded-view
  (new Jiri-Downloaded
    font: default-label-font
    position: (new Point 175 477)
    size: (new Dimension 160 20)))


;;;
;;;; Status
;;;


(class Jiri-Status extends Jiri-Label
  
  
  ;; minimize flicker
  (definition last-title
    #f)
  
  
  (method override (label-title self)
    (let ((title
            (let ((of (count-tasks)))
              (if (= of 0)
                  ""
                (let ((info (current-task-info)))
                  (if (not info)
                      "Done"
                    (bind (task step from to) info
                      (if (not (get-status task))
                          (or last-title "")
                        (string-append (get-status task) " (" (number->string (+ step 1)) "/" (number->string of) ")")))))))))
      (set! last-title title)
      title)))


(definition public status-view
  (new Jiri-Status
    title: ""
    font: default-label-font
    position: (new Point 345 477)
    size: (new Dimension 145 20)
    justification: 'tail))


;;;
;;;; Remaining
;;;


(class Jiri-Remaining extends Jiri-Label
  
  
  (method override (label-title self)
    (let ((remaining (calculate-remaining)))
      (if (not remaining)
          "Remaining: "
        (string-append "Remaining: " (number->string remaining))))))


(definition public remaining-view
  (new Jiri-Remaining
    font: default-label-font
    position: (new Point 650 477)
    size: (new Dimension 150 20)
    justification: 'tail))


;;;
;;;; Progress
;;;


(definition public progress-view
  (new Jiri-Progress
    position: (new Point 50 498)
    size: (new Dimension 750 20)))


;;;
;;;; Task
;;;


(definition protected (invalidate-task task)
  (invalidate-view percentage-view)
  (invalidate-view downloaded-view)
  (invalidate-view status-view)
  (invalidate-view remaining-view)
  (invalidate-view progress-view))


(set-task-invalidater invalidate-task)


;;;
;;;; Abort
;;;


(definition abort-requested
  #f)


(definition public (set-abort-requested abort)
  (set! abort-requested abort))


(definition protected (safe-abort-point cleanup)
  (and abort-requested
       (begin
         (cleanup)
         (when (not (work-in-progress?))
           (abort-requested))
         #t))))

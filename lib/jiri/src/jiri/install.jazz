;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Install
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.install jazz


(import (jazz.git.foreign)
        (jazz.io)
        (jazz.platform)
        (jazz.system)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jiri.base)
        (jiri.devel)
        (jiri.git)
        (jiri.git-interface)
        (jiri.view)
        (jiri.settings)
        (jiri.structure)
        (jiri.window)
        (jiri.work))


(define stage
  #f)


(define (prepare)
  ;; FOR TESTS
  (setenv "root-dir" (parse~ {Directory Home "aaa" "sentio"}))
  (setenv "password" "world123")
  (setenv "called-from" "setup")
  
  (current-root-dir (getenv-default "root-dir"))
  (current-password (getenv-default "password"))
  (called-from (getenv-default "called-from"))
  (set! stage (cond ((and (current-root-dir)
                          (equal? (called-from) "setup"))
                     'install-from-setup)
                    ((and (current-root-dir)
                          (equal? (called-from) "root"))
                     'current-from-root)
                    ((and (current-root-dir)
                          (equal? (called-from) "current"))
                     'install-from-current)
                    (else
                     (message-box "It is incorrect to launch this application")
                     (exit 1))))
  (when (neq? stage 'current-from-root)
    (set-work-percentage (string->number (getenv-default "work-percentage" "0.")))
    (set-work-downloaded (string->number (getenv-default "work-downloaded" "0")))
    (set-window-h (string->number (getenv-default "window-h" "-1")))
    (set-window-v (string->number (getenv-default "window-v" "-1")))))


;;;
;;;; Install
;;;


(define (install)
  (case stage
    ((install-from-setup) (install-from-setup-work))
    ((current-from-root) (current-from-root-work))
    ((install-from-current) (install-from-current-work))))


;;;
;;;; Install From Setup
;;;


(define (install-from-setup-work)
  (install-current)
  (install-root)
  (install-desktop)
  (install-start-menu)
  (update-start-menu)
  (install-uninstall)
  (install-application/world
    (lambda (new-content?)
      (install-done))))


;;;
;;;; Current From Root
;;;


(define (current-from-root-work)
  (pull-repository "launch" (jiri-install-remote) (jiri-install-branch) (current-password) (install-dir) 1 6 0. .05 .1
    (lambda (new-content?)
      (if new-content?
          (delegate-install (current-root-dir) (current-password) "current")
        (begin
          (update-start-menu)
          (rewind-start-menu)
          (install-application/world
            (lambda (new-content?)
              (install-done))))))))


;;;
;;;; Install From Current
;;;


(define (install-from-current-work)
  (install-current)
  (install-root)
  (update-start-menu)
  (rewind-start-menu)
  (install-application/world
    (lambda (new-content?)
      (install-done))))


;;;
;;;; Work
;;;


(define (install-application/world cont)
  (pull-repository "application" (jiri-app-remote) (jiri-app-branch) (current-password) (app-dir) 3 6 .1 .2 .4
    (lambda (new-content?)
      (pull-repository "world" (jiri-world-remote) (jiri-world-branch) (current-password) (world-dir) 5 6 .4 .85 1.
        cont))))


;;;
;;;; Done
;;;


(define (install-done)
  (set-title~ stage-view "Ready to play!")
  (set-color~ stage-view stage-ready-color)
  (set-title~ status-view "Done")
  (set-enabled?~ play-view #t)
  (set-cursor :arrow)
  (set-work-in-progress? #f)
  (set-work-done? #t))


(define (install-current)
  (let ((install-dir (make-directory (install-dir)))
        (current-dir (make-directory (current-dir))))
    (define (install-file filename)
      (install-file~
        (new-file~ install-dir filename)
        (new-file~ current-dir filename)))
    
    (define (install-directory dirname)
      (install-directory~
        (new-directory~ install-dir dirname)
        (new-directory~ current-dir dirname)))
    
    ;; danger
    @convert
    (remove-directory current-dir)
    (create-directories~ current-dir)
    
    (install-file "Install.exe")
    (install-file "Uninstall.exe")
    (install-file "libgit2.dll")
    (install-file "libeay32.dll")
    (install-file "ssleay32.dll")
    (install-file ".repository")
    (install-directory "lib")))


(define (install-root)
  (let ((from (make-file (launch-exe)))
        (from-lib (make-directory (launch-lib)))
        (to (make-file (root-exe)))
        (to-lib (make-directory (root-lib))))
    ;; danger
    (when (exists?~ to)
      (delete-file~ to))
    (install-file~ from to)
    (install-directory~ from-lib to-lib)))


(define (install-desktop)
  @convert
  (let ((path (root-exe))
        (shortcut (desktop-shortcut)))
    (let ((hr (create-shortcut path #f shortcut (jiri-title))))
      (when (< hr 0)
        (error "Unable to create desktop shortcut (0x" (number->string hr 16) ")")))))


(define (install-start-menu)
  @convert
  (let ((root (root-exe))
        (appdir (start-menu-appdir)))
    (when (file-exists? appdir)
      ;; danger
      (remove-directory appdir))
    (create-directory appdir)
    (let ((shortcut (start-menu-shortcut appdir)))
      (let ((hr (create-shortcut root #f shortcut (jiri-title))))
        (when (< hr 0)
          (error "Unable to create start menu shortcut (0x" (number->string hr 16) ")"))))))


(define (update-start-menu)
  @convert
  (let ((root (root-exe))
        (appdir (start-menu-appdir)))
    (when (file-exists? appdir)
      (let ((title "Video Card Information"))
        (let ((shortcut (string-append appdir "/" title ".lnk")))
          (let ((hr (create-shortcut root "-information" shortcut title)))
            (when (< hr 0)
              (error "Unable to create start menu shortcut (0x" (number->string hr 16) ")"))))))))


;; hack around windows taking forever to remove newly installed highlight
(define (rewind-start-menu)
  @convert
  (let ((shortcut (start-menu-shortcut (start-menu-appdir))))
    (when (file-exists? shortcut)
      (rewind-creation-time shortcut))))


(define (install-uninstall)
  @convert
  (let ((key (registry-create-key (HKEY_CURRENT_USER) (uninstall-subkey))))
    (registry-set-string key "DisplayName" (jiri-title))
    (registry-set-string key "DisplayIcon" (pathname-platformize (root-exe)))
    (registry-set-string key "DisplayVersion" (jiri-version))
    (registry-set-string key "Publisher" (jiri-company))
    (registry-set-string key "InstallDate" (get-local-date))
    (registry-set-string key "InstallLocation" (pathname-platformize (current-root-dir)))
    (registry-set-string key "UninstallString" (string-append (pathname-platformize (root-exe)) " -uninstall"))
    (registry-set-int key "EstimatedSize" (jiri-size))
    (registry-set-int key "NoModify" 1)
    (registry-set-int key "NoRepair" 1)
    (registry-close-key key)))


;;;
;;;; Layout
;;;


(define (layout)
  (add-view root-view)
  (add-view invite-view)
  (when close-view
    (add-view close-view))
  (when minimize-view
    (add-view minimize-view))
  (add-view percentage-view)
  (add-view downloaded-view)
  (add-view status-view)
  (add-view remaining-view)
  (add-view progress-view)
  (add-view play-view)
  (if (eq? stage 'install-from-setup)
      (begin
        (add-stage-view "Setup successful!" stage-install-color)
        @convert
        (thread-start!
          (make-thread
            (lambda ()
              (thread-sleep! 2.5)
              (PostMessage (window-handle current-window) WM_USER UPDATING_GAME 0)))))
    (add-stage-view "Updating game" stage-install-color))
  (when (neq? stage 'current-from-root)
    (set-title~ percentage-view (string-append (number->string (fxround work-percentage)) "%"))
    (set-title~ downloaded-view (string-append "Downloaded: " (number->string work-downloaded) "M"))
    (set-title~ status-view (downloading-title "application" 3 6))
    (set-info~ progress-view (new Range .1 .4) (new Range 0 10)))
  (set-return-callback
    (lambda ()
      (when work-done?
        (play))))
  (set-quit-callback
    (quit-safely)))


;;;
;;;; Init
;;;


(set-init
  (lambda ()
    (prepare)
    (layout)))


;;;
;;;; Startup
;;;


(set-startup
  (lambda ()
    ;; (install)
    )))

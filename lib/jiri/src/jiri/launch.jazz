;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Launch
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.launch jazz


@CONVERT (
(import (jazz.io)
        (jazz.platform)
        (jiri)
        (jiri.base)
        (jiri.settings)
        (jiri.structure))


;;;
;;;; Launch
;;;


(definition public (launch)
  (current-root-dir kernel-install)
  (let ((args (command-arguments)))
    (cond ((and (equal? args '("-information")) (jiri-launch-information))
           (launch-information))
          ((and (equal? args '("-uninstall")) (jiri-launch-uninstall?))
           (launch-uninstall))
          ((equal? args '())
           (launch-current))
          (else
           (incorrect-installation)))))


(define (incorrect-installation)
  (system-message "Incorrect installation")
  (exit 1))


;;;
;;;; Information
;;;


(define (launch-information)
  (cond ((file-exists? (app-exe))
         (delegate-process (app-exe) arguments: (jiri-launch-information))
         (_quit))
        (else
         (incorrect-installation))))


;;;
;;;; Current
;;;


(define (launch-current)
  (define (check-running)
    (let ((pid (current-process-id))
          (root-exe (add-extension (string-append kernel-install (jiri-launcher)) (executable-extension kernel-platform)))
          (install-dir (string-append kernel-install (get-dir (jiri-install-section)))))
      (iterate-table (collect-processes-info)
                     (lambda (id info)
                       (bind (id name exe) info
                         (when (and (/= id 0)
                                    (/= id pid)
                                    (not (equal? exe ""))
                                    (or (filename=? exe root-exe)
                                        (starts-with? exe install-dir)))
                           (system-message (string-append (jiri-title) " installer is already running"))
                           (exit 1)))))))
  
  (cond ((file-exists? (current-exe))
         (check-running)
         (delegate-current (current-root-dir) (current-password) "root"))
        (else
         (incorrect-installation))))


;;;
;;;; Uninstall
;;;


(define (launch-uninstall)
  @convert
  (let ((uninstall (uninstall-exe)))
    (cond ((file-exists? uninstall)
           (delegate-uninstall uninstall))
          (else
           (incorrect-installation)))))


@convert
(define (delegate-uninstall uninstall)
  (let ((uninstall-temp (get-temporary-file (string-append (jiri-title) " uninstall") "exe")))
    (duplicate uninstall uninstall-temp)
    (delegate-process uninstall-temp)
    (_quit)))))

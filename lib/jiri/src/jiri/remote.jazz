;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Remote Interface
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.remote jazz


(import (jazz.associative)
        (jazz.associative.client)
        (jazz.splash)
        (jazz.io)
        (jiri.base)
        (jiri.connection)
        (jiri.manage)
        (jiri.section)
        (jiri.settings)
        (jiri.structure)
        (jiri.task)
        (jiri.view)
        (jiri.window)
        (jiri.work))


;;;
;;;; Pull
;;;


(definition public (repository-uptodate? section dir (directory: directory #f))
  (let ((connection (get-connection section)))
    (let ((host (get-host connection))
          (path (get-path connection)))
      (define (open/init-repository proc)
        (let ((dir (new Directory (tokenise-filename dir))))
          (let ((directory (and directory (new-directory dir (tokenise-filename directory)))))
            (let ((repo (new Associative-Repository dir init?: #t open?: #t directory: directory)))
              (let ((client (new Jas-Client repo host path 'read)))
                (proc repo client))))))
      
      (define (check client)
        (connect client)
        (prog1 (uptodate? client)
          (deconnect client)))
      
      (open/init-repository
        (lambda (repo client)
          (check client))))))


(definition public (pull-repository-if section dir cont . rest)
  (if (not section)
      (cont #f)
    (apply pull-repository section dir cont rest)))


(definition public (pull-repository section dir cont (directory: directory #f) (cache-repository: cache-repository #f) (cache-exclude: cache-exclude #f))
  (let ((title (get-title section))
        (connection (get-connection section)))
    (let ((name (get-name connection))
          (host (get-host connection))
          (path (get-path connection))
          (sets (get-sets connection))
          (update-sets (get-update-sets connection))
          (task (get-download-task connection))
          (new-content? #f))
      (define (open/init-repository proc)
        (let ((dir (new Directory (tokenise-filename dir))))
          (let ((directory (and directory (new-directory dir (tokenise-filename directory)))))
            (let ((repo (new Associative-Repository dir init?: #t open?: #t directory: directory)))
              (let ((client (new Jas-Client repo host path 'read feedback: feedback)))
                (proc repo client))))))
      
      (define (feedback . rest)
        (bind (stage . rest) rest
          (case stage
            ((connect))
            ((deconnect)
             (download-done))
            ((progress)
             (bind (total-objects received-objects received-bytes) rest
               (download-progress total-objects received-objects received-bytes))))))
      
      (define (download repo client)
        (connect client)
        (cond (cache-repository
               (download-all-with-cache client cache-repository cache-exclude: cache-exclude))
              (sets
               (download-sets client sets update-sets))
              (else
               (download-all client)))
        (deconnect client))
      
      (define download-progress
        (let ((inited? #f)
              (last-step #f))
          (lambda (total-objects received-objects received-bytes)
            (unless (safe-abort-point)
              (set! new-content? #t)
              (let ((step (fxceiling (* (/ (cast <fl> received-objects) (cast <fl> total-objects)) 100.))))
                (when (or (not last-step)
                          (> step last-step))
                  (set! last-step step)
                  (let ((downloaded (fxfloor (/ (exact->inexact received-bytes) (* 1024. 1024.))))
                        (remaining (- total-objects received-objects)))
                    (set-downloaded task downloaded)
                    (set-remaining task remaining))
                  (when (not inited?)
                    (set-range task (new Range 0 total-objects))
                    (set! inited? #t))
                  (set-pos task received-objects)))))))
      
      (define download-done
        (lambda ()
          (unless (safe-abort-point)
            (set-working? connection #f)
            (set-done task)
            (cont new-content?))))
      
      (set-started? connection #t)
      (set-working? connection #t)
      (set-status task (string-append "Downloading " title))
      (open/init-repository
        (lambda (repo client)
          (set-range task (new Range 0 1))
          (download repo client))))))


;;;
;;;; Exit
;;;


(definition public (exit-safely)
  (if (not (work-in-progress?))
      (exit)
    (set-abort-requested exit))))

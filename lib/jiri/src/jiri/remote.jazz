;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Remote Interface
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.remote jazz


(import (jazz.application)
        (jazz.associative)
        (jazz.associative.client)
        (jazz.component)
        (jazz.event)
        (jazz.graphic)
        (jazz.handler)
        (jazz.io)
        (jazz.listener)
        (jazz.markup)
        (jazz.platform)
        (jazz.text)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.view)
        (jazz.window)
        (jiri)
        (jiri.base)
        (jiri.connection)
        (jiri.manage)
        (jiri.settings)
        (jiri.structure)
        (jiri.window)
        (jiri.work))


;;;
;;;; Pull
;;;


(definition public (pull-repository section dir cont (cache-repository: cache-repository #f))
  (let ((title (get-title section))
        (connection (get-connection section)))
    (let ((name (get-name connection))
          (host (get-host connection))
          (path (get-path connection))
          (sets (get-sets connection))
          (update-sets (get-update-sets connection))
          (task (get-download-task connection))
          (new-content? #f))
      (define (open/init-repository proc)
        (let ((dir (new Directory (tokenise-filename dir))))
          (let ((repo (new Associative-Repository dir init?: #t open?: #t)))
            (let ((client (new Jas-Client repo host path 'read feedback: feedback)))
              (proc repo client)))))
      
      (define (feedback . rest)
        (bind (stage . rest) rest
          (case stage
            ((connect))
            ((deconnect)
             (download-done))
            ((progress)
             (bind (total-objects received-objects received-bytes) rest
               (download-progress total-objects received-objects received-bytes))))))
      
      (define (download repo client)
        (connect client)
        (cond (cache-repository
               (download-all-with-cache client cache-repository))
              (sets
               (download-sets client sets update-sets))
              (else
               (download-all client)))
        (deconnect client))
      
      (define download-progress
        (let ((inited? #f)
              (last-step #f))
          (lambda (total-objects received-objects received-bytes)
            (set! new-content? #t)
            (let ((step (fxceiling (* (/ (cast <fl> received-objects) (cast <fl> total-objects)) 100.))))
              (when (or (not last-step)
                        (> step last-step))
                (set! last-step step)
                (let ((downloaded (fxfloor (/ (exact->inexact received-bytes) (* 1024. 1024.))))
                      (remaining (- total-objects received-objects)))
                  (set-downloaded task downloaded)
                  (set-remaining task remaining))
                (when (not inited?)
                  (set-range task (new Range 0 total-objects))
                  (set! inited? #t))
                (set-pos task received-objects))))))
      
      (define download-done
        (lambda ()
          (unless (safe-abort-point
                    (lambda ()
                      (set-cursor :arrow)
                      (set-working? connection #f)))
            (set-cursor :arrow)
            (set-working? connection #f)
            (set-done task)
            (cont new-content?))))
      
      (set-cursor :wait)
      (set-started? connection #t)
      (set-working? connection #t)
      (set-status task (string-append "Downloading " title))
      (open/init-repository
        (lambda (repo client)
          (set-range task (new Range 0 1))
          (download repo client))))))


;;;
;;;; Quit
;;;


(definition public (quit-safely)
  (lambda ()
    (if (not (work-in-progress?))
        (quit)
      (request-quit "Disconnecting..."))))


(define (request-quit title)
  (set-abort-requested (lambda () (quit)))
  (set-title status-view title)
  (when minimize-view
    (set-enabled? minimize-view #f))
  (when close-view
    (set-enabled? close-view #f))))

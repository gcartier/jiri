;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Structure
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.structure jazz


(import (jiri.base)
        (jiri.manage)
        (jiri.settings)
        (jiri.syntax (phase syntax)))


;;;
;;;; Structure
;;;


(define-jiri current-root-dir
  #f)

(define-jiri current-password
  #f)

(define-jiri called-from
  #f)


(definition (section-dir section)
  (string-append (normalize-directory (get-dir~ section))
                 (normalize-directory (get-dirname~ (get-connection~ section)))))


(definition public (app-dir)
  (string-append (current-root-dir) (section-dir (jiri-app-section))))

(definition public (install-dir)
  (string-append (current-root-dir) (section-dir (jiri-install-section))))

(definition public (update-dir)
  (string-append (current-root-dir) (section-dir (jiri-update-section))))

(definition public (world-dir)
  (and (jiri-world-section) (string-append (current-root-dir) (section-dir (jiri-world-section)))))

(definition public (current-dir)
  (string-append (current-root-dir) (normalize-directory (jiri-install-current))))

(definition public (root-exe)
  (add-extension (string-append (current-root-dir) (jiri-launcher)) (executable-extension kernel-platform)))

(definition public (root-lib)
  (string-append (current-root-dir) "lib/"))

(cond-expand
  (mac
    (definition public (app-exe)
      (add-extension (string-append (app-dir) "Contents/MacOS/" (jiri-application)) (executable-extension kernel-platform))))
  (windows
    (definition public (app-exe)
      (add-extension (string-append (app-dir) (jiri-application)) (executable-extension kernel-platform))))
  (else))

(definition public (current-exe)
  (add-extension (string-append (current-dir) "Install") (executable-extension kernel-platform)))

(definition public (uninstall-exe)
  (add-extension (string-append (current-dir) "Uninstall") (executable-extension kernel-platform)))

(definition public (install-exe)
  (add-extension (string-append (install-dir) "Install") (executable-extension kernel-platform)))

(definition public (launch-exe)
  (add-extension (string-append (install-dir) "Launch") (executable-extension kernel-platform)))

(definition public (launch-lib)
  (string-append (install-dir) "lib/"))

(definition public (update-exe)
  (string-append (update-dir) "Contents/MacOS/" (jiri-update-exe)))

(definition public (game-string)
  (or (jiri-game) "game"))


;;;
;;;; Work
;;;


(definition public work-done?
  #f)

(definition public (set-work-done? value)
  (set! work-done? value))


(definition public work-downloaded
  0)

(definition public (set-work-downloaded value)
  (set! work-downloaded value))


(definition public send-ready?
  #f)

(definition public (set-send-ready? send?)
  (set! send-ready? send?))


;;;
;;;; Delegate
;;;


(definition public (delegate-current root-dir password called-from)
  (let ((environment
          (build-environment
            (lambda (add)
              (add "root-dir" root-dir)
              (add "password" (or password ""))
              (add "called-from" called-from)))))
    (delegate-process (current-exe) environment: environment))
  (quit))


(definition public (delegate-install root-dir password called-from)
  (let ((environment
          (build-environment
            (lambda (add)
              (add "root-dir" root-dir)
              (add "password" (or password ""))
              (add "called-from" called-from)
              (add "work-downloaded" (number->string (or (calculate-downloaded) 0)))
              (let ((pos (get-position~ (jazz.application:get-toplevel))))
                (add "window-h" (number->string (get-h~ pos)))
                (add "window-v" (number->string (get-v~ pos))))
              (add "send-ready" "true")))))
    (delegate-process (install-exe) environment: environment wait-and-quit?: #t))))

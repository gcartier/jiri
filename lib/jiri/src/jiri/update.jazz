;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Update
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.update jazz


(import (jazz.appl)
        (jazz.associative)
        (jazz.associative.remote)
        (jazz.io)
        (jazz.settings)
        (jazz.snapshot)
        (jazz.splash)
        (jiri.base)
        (jiri.connection)
        (jiri.manage)
        (jiri.monitor)
        (jiri.remote)
        (jiri.section)
        (jiri.settings)
        (jiri.structure)
        (jiri.task)
        (jiri.view)
        (jiri.work))


;; MAC
;; Contents
;; - Apps
;;   - update.app
;;     - Contents
;;       - Libraries
;;       - MacOS
;;         - Sirius
;;       - Resources
;;         - .jas
;; - Libraries
;; - MacOS
;;   - Together (launch)
;; - Resources
;; - Worlds
;;   - together
;;     - .jas

;; WINDOWS
;; Together (launch)
;; lib
;; sirius
;; - current
;; - sirius-install
;;   - .jas
;; worlds
;; - together
;;   - .jas
;; together (why not app)
;; - test
;;   - Together (app)
;;     - .jas


(definition (effective-launch-url)
  (or (launch-url) (string-argument "url" #f)))


;;;
;;;; Update
;;;


(definition public (update-tasks-done)
  (for-each set-done (get-children (get-connection (jiri-update-section)))))


(definition public update-priority
  -10)


(definition public (catch-jiri-exception thunk)
  (define (exception-message exc)
    (typecase exc
      ((Jas-Unable-To-Connect) "Unable to connect to server")
      ((Jas-Invalid-Version) (format "Your version of {a} is obsolete. Please reinstall" (jiri-invite)))
      ((Jas-Invalid-Path) "Invalid path")
      ((Jas-Inexistant-Repository) "Inexistant repository")
      ((Jas-Connection-Broke) "Connection broke")
      (else "An unexpected problem occurred")))
  
  (define (exception-header exc)
    (if (is? exc Jas-Connection-Exception)
        "Failed to connect"
      "Unexpected problem"))
  
  (catch-exception-filter
    (lambda (exc)
      (snapshot-process
        exception: exc
        max-depth: 0
        max-width: 256
        max-content: 64
        current-thread-only?: #t)
      #t)
    (lambda (exc)
      (let ((message (exception-message exc))
            (header (exception-header exc)))
        (splash-event
          (lambda ()
            (system-message message
                            type: 'problem
                            title: (jiri-invite)
                            header: header)
            (exit 1)))
        (sleep +inf.0)))
    (lambda ()
      (thunk))))


(definition protected first-install?
  #t)

(definition protected (set-first-install? first?)
  (set! first-install? first?))


(definition public (setup-stage-view)
  (if first-install?
      (add-stage-view stage-install-color)
    (add-stage-view stage-ready-color)))


(definition public (set-stage-view-updating)
  (set-title stage-view (if first-install?
                            (string-append "Installing " (jiri-title) " for the first time, please be patient")
                          (string-append "Updating " (jiri-title)))))


;;;
;;;; Update
;;;


(definition public (delegate-update root-dir called-from first-install?)
  (let ((arguments
          (build-arguments
            (lambda (add)
              (add "root-dir" root-dir)
              (add "called-from" called-from)
              (add "first-install" (if first-install? "yes" "no"))
              (add "work-downloaded" (number->string (or (calculate-downloaded) 0)))
              (let ((url (effective-launch-url)))
                (when url
                  (add "url" url)))))))
    (delegate-process (update-exe) arguments: arguments wait-and-exit?: #t)))


;;;
;;;; Work
;;;


(definition public (update-app/data cont)
  (pull-repository-if (jiri-worker-section) (worker-dir)
    (lambda (new-content?)
      (pull-repository (jiri-app-section) (app-dir)
        (lambda (new-app-content?)
          (pull-repository (jiri-data-section) (data-dir)
            (lambda (new-data-content?)
              (cont (or new-app-content? new-data-content?)))))
        directory: (app-directory)))))


(definition public (launch-app title new-content? load-expected cont)
  (let ((section (jiri-splash-section)))
    (bind (task) (get-tasks section)
      (set-title stage-view (if new-content? (jiri-splash-updated) (jiri-splash-uptodate)))
      (set-status task (format "Launching {a}" title))
      (let ((server-port (open-tcp-server 0)))
        (let ((arguments
                (build-arguments
                  (lambda (add)
                    (add "load-feedback" (number->string (socket-info-port-number (tcp-server-socket-info server-port))))
                    (add "load-expected" (number->string load-expected))
                    (add "called-from" "sirius")
                    (let ((url (effective-launch-url)))
                      (when url
                        (add "url" url)))))))
          (delegate-process (app-exe) arguments: arguments))
        (let ((port (read server-port)))
          (launch-feedback title task port cont))))))


(definition protected (launch-feedback title task port cont)
  (declare (proper-tail-calls))
  (let ((total (read port)))
    (set-remaining task total)
    (set-range task (new Range 0 total))
    (let ((last-step #f))
      (let (loop (loaded 0))
        (let ((unit-name (read port)))
          (cond ((eof-object? unit-name)
                 (error "Unable to launch {a}" title))
                ((equal? unit-name '(done))
                 (set-remaining task 0)
                 (set-done task)
                 (cont))
                (else
                 (let ((loaded (+ loaded 1)))
                   (let ((remaining (max 0 (- total loaded))))
                     ;; give more feedback near the end of launch
                     (let ((factor (cond ((<= remaining 10.) 1000.)
                                         ((<= remaining 50) 200.)
                                         (else 50.))))
                       (let ((step (fxceiling (* (/ (cast <fl> loaded) (cast <fl> total)) factor))))
                         (when (or (not last-step)
                                   (> step last-step))
                           (set! last-step step)
                           (cond ((>= loaded total)
                                  (set-pos task total)
                                  (set-remaining task 0))
                                 (else
                                  (set-pos task loaded)
                                  (set-remaining task remaining)))))))
                   (loop loaded)))))))))


;;;
;;;; Layout
;;;


(definition public (jiri-layout)
  (add-pane-view (invite-view))
  (add-pane-view close-view)
  (add-pane-view minimize-view)
  (add-pane-view percentage-view)
  (add-pane-view downloaded-view)
  (add-pane-view status-view)
  (add-pane-view remaining-view)
  (add-pane-view progress-view)))

;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Update
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.update jazz


(import (jazz.git.foreign)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jiri.base)
        (jiri.devel)
        (jiri.git)
        (jiri.git-interface)
        (jiri.view)
        (jiri.settings)
        (jiri.structure)
        (jiri.window)
        (jiri.work))


;; MAC
;; Contents
;; - Info.plist
;; - App
;;   - yownu.app
;;     - Contents
;;       - MacOS
;;         - .git
;;         - Yownu
;;         - lib
;; - MacOS
;;   - Yownu
;;   - lib
;; - Resources
;; - Update
;;   - yownu.app
;;     - Contents
;;       - MacOS
;;         - .git
;;         - Yownu
;;         - lib
;; - Worlds
;;   - yownu
;;     - .git


(define stage
  #f)


(define (prepare)
  (current-root-dir (getenv-default "root-dir"))
  (closed-beta-password (getenv-default "closed-beta-password"))
  (called-from (getenv-default "called-from"))
  (set! stage (cond ((and (not (current-root-dir))
                          (not (called-from)))
                     'root)
                    ((and (current-root-dir)
                          (equal? (called-from) "root"))
                     'update)
                    (else
                     (message-box "It is incorrect to launch this application")
                     (exit 1))))
  (when (eq? stage 'update)
    (set-work-percentage (string->number (getenv-default "work-percentage" "0.")))
    (set-work-downloaded (string->number (getenv-default "work-downloaded" "0")))
    (set-window-h (string->number (getenv-default "window-h" "-1")))
    (set-window-v (string->number (getenv-default "window-v" "-1")))))


;;;
;;;; Update
;;;


(define (update)
  (case stage
    ((root) (update-at-root))
    ((update) (update-at-update))))


;;;
;;;; At Root
;;;


(define (update-at-root)
  (current-root-dir kernel-bundle-root)
  (pull-repository "update" (jiri-update-remote) (jiri-update-branch) (closed-beta-password) (update-dir) 1 6 0. .05 .1
    (lambda (new-content?)
      (if new-content?
          #f
          @w
          (delegate-update (current-root-dir) (closed-beta-password) "current")
        (update-application/world
          (lambda (new-content?)
            (update-done)))))))


;;;
;;;; At Update
;;;


(define (update-at-update)
  (update-current)
  (update-application/world
    (lambda (new-content?)
      (update-done))))


;;;
;;;; Work
;;;


(define (update-application/world cont)
  (pull-repository "application" (jiri-app-remote) (jiri-app-branch) (closed-beta-password) (app-dir) 3 6 .1 .2 .4
    (lambda (new-content?)
      (pull-repository "world" (jiri-world-remote) (jiri-world-branch) (closed-beta-password) (world-dir) 5 6 .4 .85 1.
        cont))))


;;;
;;;; Done
;;;


(define (update-done)
  (set-title~ stage-view "Ready to play!")
  (set-color~ stage-view stage-ready-color)
  (set-title~ status-view "Done")
  (set-enabled?~ play-view #t)
  (set-cursor :arrow)
  (set-work-in-progress? #f)
  (set-work-done? #t))


(define (update-current)
  @convert
  (let ((update-dir (update-dir))
        (current-dir (current-dir)))
    (define (copy filename)
      (let ((from (string-append update-dir "/" filename))
            (to (string-append current-dir "/" filename)))
        (copy-file from to)))
    
    (define (copy-dir dirname)
      (let ((from (string-append update-dir "/" dirname "/"))
            (to (string-append current-dir "/" dirname "/")))
        (jazz:copy-directory from to)))
    
    ;; danger
    (remove-directory current-dir)
    (create-directory current-dir)
    
    (copy "Install.exe")
    (copy "Uninstall.exe")
    (copy "libgit2.dll")
    (copy "libeay32.dll")
    (copy "ssleay32.dll")
    (copy ".repository")
    (copy-dir "lib")))


;;;
;;;; Layout
;;;


(define (layout)
  (add-view root-view)
  (add-view invite-view)
  (when close-view
    (add-view close-view))
  (when minimize-view
    (add-view minimize-view))
  (add-view percentage-view)
  (add-view downloaded-view)
  (add-view status-view)
  (add-view remaining-view)
  (add-view progress-view)
  (add-view play-view)
  @convert
  (if (eq? stage 'update-from-setup)
      (begin
        (add-stage-view "Setup successful!" stage-install-color)
        (thread-start!
          (make-thread
            (lambda ()
              (thread-sleep! 2.5)
              (PostMessage (window-handle current-window) WM_USER UPDATING_GAME 0)))))
    (add-stage-view "Updating game" stage-install-color))
  @convert
  (when (neq? stage 'current-from-root)
    (set-title~ percentage-view (string-append (number->string (fxround work-percentage)) "%"))
    (set-title~ downloaded-view (string-append "Downloaded: " (number->string work-downloaded) "M"))
    (set-title~ status-view (downloading-title "application" 3 6))
    (set-info~ progress-view (new Range .1 .4) (new Range 0 10)))
  (set-return-callback
    (lambda ()
      (when work-done?
        (play))))
  (set-quit-callback
    (quit-safely)))


;;;
;;;; Init
;;;


(set-init
  (lambda ()
    (prepare)
    (layout)))


;;;
;;;; Startup
;;;


(set-startup
  (lambda ()
    (update))))

;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Update
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.update jazz


;; MAC
;; Contents
;; - Info.plist
;; - App
;;   - update.app
;;     - Contents
;;       - MacOS
;;         - .git
;;         - Yownu (update)
;;         - lib
;;   - yownu.app
;;     - Contents
;;       - MacOS
;;         - .git
;;         - Yownu
;;         - lib
;; - MacOS
;;   - Yownu (launch)
;;   - lib
;; - Resources
;; - Worlds
;;   - yownu
;;     - .git


@UPDATE_ALL_CODE (
(define stage
  #f)


(define (prepare)
  (current-root-dir (getenv-default "root-dir"))
  (current-password (getenv-default "password"))
  (called-from (getenv-default "called-from"))
  (set! stage (cond ((and (not (current-root-dir))
                          (not (called-from)))
                     'launch)
                    ((and (current-root-dir)
                          (equal? (called-from) "launch"))
                     'update)
                    (else
                     (message-box "It is incorrect to launch this application")
                     (exit 1))))
  (when (eq? stage 'update)
    (set-work-downloaded (string->number (getenv-default "work-downloaded" "0")))
    (set-window-h (string->number (getenv-default "window-h" "-1")))
    (set-window-v (string->number (getenv-default "window-v" "-1")))
    (set-send-ready? (getenv-default "send-ready" #f))))


(define (was-update-new?)
  (equal? (getenv-default "update-new" "yes") "yes"))


;;;
;;;; Update
;;;


(define (update)
  (case stage
    ((launch) (update-at-launch))
    ((update) (update-at-update))))


;;;
;;;; At Launch
;;;


(define (update-at-launch)
  (current-root-dir kernel-bundle-root)
  (let ((update-new? (not (file-exists? (update-dir)))))
    (add-stage-view (string-append "Updating " (jiri-update-title)) (determine-stage-color (update-dir)))
    (catch (Git-Exception exc
             (define (debug-info)
               (if (jiri-devel?)
                   (string-append " (" (get-message~ exc) ")")
                 ""))
             
             (if (or (not (file-exists? (app-dir)))
                     (not (file-exists? (world-dir))))
                 (add-stage-view (string-append "Failed to install " (game-string) (debug-info)) stage-setup-color)
               (add-stage-view (string-append "Failed to update " (game-string) (debug-info)) stage-setup-color)))
      (pull-repository (jiri-update-section) (current-password) (update-dir)
        (lambda (new-content?)
          (if new-content?
              (delegate-update (current-root-dir) (current-password) "launch" update-new?)
            (update-application/world (get-limits~ (jiri-app-section))
              (lambda (new-content?)
                (update-done)))))
        #t))))


(definition public (delegate-update root-dir password called-from update-new?)
  (let ((environment
          (build-environment
            (lambda (add)
              (add "root-dir" root-dir)
              (add "password" (or password ""))
              (add "called-from" called-from)
              (add "update-new" (if update-new? "yes" "no"))
              (add "work-downloaded" (number->string (or (calculate-downloaded) 0)))
              (let ((pos (get-position~ (get-toplevel))))
                (add "window-h" (number->string (get-h~ pos)))
                (add "window-v" (number->string (get-v~ pos))))
              (add "send-ready" "true")))))
    (delegate-process (update-exe) environment: environment wait-and-quit?: #t)))


;;;
;;;; At Update
;;;


(define (update-at-update)
  (add-stage-view (string-append "Updating " (jiri-update-title)) (if (was-update-new?) stage-setup-color stage-install-color))
  ;;convert-to-task(set-title~ status-view (updating-title (jiri-update-title) 1 6))
  (thread-start!
    (make-thread
      (lambda ()
        (update-launch .1 .2
          (lambda ()
            (update-application/world .2 .3 .4
              (lambda (new-content?)
                (update-done)))))))))


(define (update-launch head tail cont)
  (let ((update-dir (make-directory (update-dir)))
        (root-dir (make-directory (current-root-dir))))
    (define (install-file filename)
      (install-file~
        (new-file~ update-dir filename)
        (new-file~ root-dir filename)))
    
    (define (install-directory-macos dirname libdir)
      (install-directory~
        (new-directory~ update-dir dirname)
        (new-directory~ root-dir dirname)
        progress-feedback: (lambda (action dir)
                             (when (and (eq? action 'entering)
                                        (pathname=? (get-parent~ dir) libdir))
                               (post-event
                                 (lambda ()
                                   ;;convert-to-task(increase-pos~ progress-view)
                                   ;;convert-to-task(set-title~ remaining-view (string-append "Remaining: " (number->string (get-remaining~ progress-view))))
                                   ))))))
    
    (define (install-directory dirname)
      (install-directory~
        (new-directory~ update-dir dirname)
        (new-directory~ root-dir dirname)))
    
    (let ((libdir (new-directory~ update-dir "Contents/MacOS/lib")))
      (let ((package-count (count-directories~ libdir)))
        (post-event
          (lambda ()
            ;;convert-to-task(set-info~ progress-view (new Range head tail) (new Range 0 package-count))
            ))
        (install-file "Contents/Info.plist")
        (install-directory-macos "Contents/MacOS" libdir)
        (install-directory "Contents/Resources")
        (post-event cont)))))


;;;
;;;; Work
;;;


(define (determine-stage-color dir)
  (if (not (file-exists? dir))
      stage-setup-color
    stage-install-color))


(define (update-application/world limits cont)
  (add-stage-view (string-append "Updating " (game-string)) (determine-stage-color (app-dir)))
  (pull-repository (jiri-app-section) (current-password) (app-dir)
    (lambda (new-content?)
      (add-stage-view (string-append "Updating " (get-title~ (jiri-world-section))) (determine-stage-color (world-dir)))
      (pull-repository (jiri-world-section) (current-password) (world-dir)
        cont))))


;;;
;;;; Done
;;;


(define (update-done)
  (set-title~ stage-view (or (jiri-play-ready) "Ready to play!"))
  (set-color~ stage-view stage-ready-color)
  (set-title~ status-view "Done")
  (set-cursor :arrow)
  (set-work-done? #t))


;;;
;;;; Layout
;;;


(define (layout)
  (add-view root-view)
  (add-view invite-view)
  (when close-view
    (add-view close-view))
  (when minimize-view
    (add-view minimize-view))
  (add-view percentage-view)
  (add-view downloaded-view)
  (add-view status-view)
  (add-view remaining-view)
  (add-view progress-view)
  (add-view play-view)
  ;; mimick launcher state
  (when (eq? stage 'update)
    ;;convert-to-task(set-title~ downloaded-view (string-append "Downloaded: " (number->string work-downloaded) "M"))
    ;;convert-to-task(set-title~ status-view (installing-title (jiri-update-title) 1 6))
    ;;convert-to-task(set-info~ progress-view (new Range 0. .1) (new Range 1 6))
    ;;convert-to-task(set-done~ progress-view)
    )
  (set-return-callback
    (lambda ()
      (when work-done?
        (play))))
  (set-quit-callback
    (quit-safely)))


;;;
;;;; Init
;;;


(set-init
  (lambda ()
    (prepare)
    (layout)))


;;;
;;;; Startup
;;;


(set-startup
  (lambda ()
    (update)))))

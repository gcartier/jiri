;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Update
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.update jazz


(import (jazz.application)
        (jazz.associative)
        (jazz.associative.remote)
        (jazz.component)
        (jazz.event)
        (jazz.io)
        (jazz.outline)
        (jazz.platform)
        (jazz.settings)
        (jazz.snapshot)
        (jazz.tree)
        (jazz.view)
        (jazz.window)
        (jiri)
        (jiri.base)
        (jiri.manage)
        (jiri.monitor)
        (jiri.remote)
        (jiri.settings)
        (jiri.structure)
        (jiri.task)
        (jiri.view)
        (jiri.window)
        (jiri.work))


;; MAC
;; Contents
;; - Apps
;;   - update.app
;;     - Contents
;;       - Libraries
;;       - MacOS
;;         - Sirius
;;       - Resources
;;         - .jas
;; - Libraries
;; - MacOS
;;   - Together (launch)
;; - Resources
;; - Worlds
;;   - together
;;     - .jas

;; WINDOWS
;; Together (launch)
;; lib
;; sirius
;; - current
;; - sirius-install
;;   - .jas
;; worlds
;; - together
;;   - .jas
;; together (why not app)
;; - test
;;   - Together (app)
;;     - .jas


(definition (effective-launch-url)
  (or (launch-url) (string-argument "url" #f)))


;;;
;;;; Update
;;;


(definition public (update-tasks-done)
  (for-each set-done (get-children (get-connection (jiri-update-section)))))


(definition public update-priority
  -10)


(definition public (catch-jiri-exception thunk)
  (define (exception-message exc)
    (typecase exc
      ((Jas-Unable-To-Connect) "Unable to connect to server")
      ((Jas-Invalid-Version) (format "Your version of {a} is obsolete. Please reinstall" (jiri-invite)))
      ((Jas-Invalid-Path) "Invalid path")
      ((Jas-Inexistant-Repository) "Inexistant repository")
      ((Jas-Connection-Broke) "Connection broke")
      (else "An unexpected problem occurred")))
  
  (define (exception-header exc)
    (if (is? exc Jas-Connection-Exception)
        "Failed to connect"
      "Unexpected problem"))
  
  (catch-exception-filter
    (lambda (exc)
      (snapshot-process
        exception: exc
        max-depth: 0
        max-width: 256
        max-content: 64
        current-thread-only?: #t)
      #t)
    (lambda (exc)
      (let ((message (exception-message exc))
            (header (exception-header exc)))
        (delay-event
          (lambda ()
            (system-message message
                            type: 'problem
                            title: (jiri-invite)
                            header: header)
            (exit 1)))
        (sleep +inf.0)))
    (lambda ()
      (thunk))))


(definition protected first-install?
  #t)

(definition protected (set-first-install? first?)
  (set! first-install? first?))


(definition public (setup-stage-view)
  (if first-install?
      (add-stage-view stage-install-color)
    (add-stage-view stage-ready-color)))


(definition public (set-stage-view-updating)
  (set-title stage-view (if first-install?
                            (string-append "Installing " (jiri-title) " for the first time, please be patient")
                          (string-append "Updating " (jiri-title)))))


;;;
;;;; Update
;;;


(definition public (delegate-update root-dir called-from first-install?)
  (let ((arguments
          (build-arguments
            (lambda (add)
              (add "root-dir" root-dir)
              (add "called-from" called-from)
              (add "first-install" (if first-install? "yes" "no"))
              (add "work-downloaded" (number->string (or (calculate-downloaded) 0)))
              (let ((pos (get-position (current-toplevel))))
                (add "window-h" (number->string (get-h pos)))
                (add "window-v" (number->string (get-v pos))))
              (add "send-ready" "true")
              (let ((url (effective-launch-url)))
                (when url
                  (add "url" url)))))))
    (delegate-process (update-exe) arguments: arguments wait-and-quit?: #t)))


;;;
;;;; Work
;;;


(definition public (update-app/data cont)
  (pull-repository (jiri-app-section) (app-dir)
    (lambda (new-app-content?)
      (pull-repository (jiri-data-section) (data-dir)
        (lambda (new-data-content?)
          (cont (or new-app-content? new-data-content?)))))
    directory: (app-directory)))


(definition public (launch-app title new-content? load-expected cont)
  (let ((section (jiri-splash-section)))
    (bind (task) (get-tasks section)
      (set-title stage-view (if new-content? (jiri-splash-updated) (jiri-splash-uptodate)))
      (set-status task (format "Launching {a}" title))
      (let ((server-port (open-tcp-server 0)))
        (let ((arguments
                (build-arguments
                  (lambda (add)
                    (add "load-feedback" (number->string (socket-info-port-number (tcp-server-socket-info server-port))))
                    (add "load-expected" (number->string load-expected))
                    (add "called-from" "sirius")
                    (let ((url (effective-launch-url)))
                      (when url
                        (add "url" url)))))))
          (delegate-process (app-exe) arguments: arguments mac-open?: (cond-expand (mac #t) (else #f))))
        (let ((port (read server-port)))
          (launch-feedback title task port cont))))))


(definition protected (launch-feedback title task port cont)
  (declare (proper-tail-calls))
  (let ((total (read port)))
    (set-remaining task total)
    (set-range task (new Range 0 total))
    (let ((last-step #f))
      (let (loop (loaded 0))
        (let ((unit-name (read port)))
          (cond ((eof-object? unit-name)
                 (error "Unable to launch {a}" title))
                ((equal? unit-name '(done))
                 (set-remaining task 0)
                 (set-done task)
                 (cont))
                (else
                 (let ((loaded (+ loaded 1)))
                   (let ((remaining (max 0 (- total loaded))))
                     ;; give more feedback near the end of launch
                     (let ((factor (cond ((<= remaining 10.) 1000.)
                                         ((<= remaining 50) 200.)
                                         (else 50.))))
                       (let ((step (fxceiling (* (/ (cast <fl> loaded) (cast <fl> total)) factor))))
                         (when (or (not last-step)
                                   (> step last-step))
                           (set! last-step step)
                           (cond ((>= loaded total)
                                  (set-pos task total)
                                  (set-remaining task 0))
                                 (else
                                  (set-pos task loaded)
                                  (set-remaining task remaining)))))))
                   (loop loaded)))))))))


;;;
;;;; Layout
;;;


(definition public (jiri-layout)
  (add-pane-view root-view)
  (add-pane-view (invite-view))
  (when close-view
    (add-pane-view close-view))
  (when minimize-view
    (add-pane-view minimize-view))
  
  (when (jiri-connections?)
    (add-pane-view connections-view)
    (let ((section (jiri-app-section)))
      (let ((connections (get-connections section))
            (default (get-default section)))
        (if (not connections)
            (let ((connection (get-connection section))
                  (tree (locate connections-view 'tree)))
              (add-row tree children: (list (new Tree-Node title: (get-title connection))) user-data: connection)
              (set-single-selection tree 0))
          (assert default)
          (set-connection-change
            (lambda (connection)
              (set-connection (jiri-app-section) connection)))
          (let ((tree (locate connections-view 'tree)))
            (for-each (lambda (connection)
                        (add-row tree children: (list (new Tree-Node title: (get-title connection))) user-data: connection))
                      connections)
            (let ((default-connection (find connections default key: get-title test: equal? return: 'item)))
              (select-user-data-row tree default-connection)))
          (set-connection-change
            (lambda (connection)
              (set-connection (jiri-app-section) connection)
              (unless (get-started? connection)
                (pull-repository (jiri-app-section) (app-dir)
                  (lambda (new-content?)
                    )))))))))
  
  (set-position remaining-view (new Point 650 477))
  (set-size progress-view (new Dimension 750 20))
  
  (add-pane-view percentage-view)
  (add-pane-view downloaded-view)
  (add-pane-view status-view)
  (add-pane-view remaining-view)
  (add-pane-view progress-view)
  (set-quit-callback
    (quit-safely))))

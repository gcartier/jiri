;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Update
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.update jazz


(import (jazz.application)
        (jazz.associative)
        (jazz.component)
        (jazz.event)
        (jazz.io)
        (jazz.outline)
        (jazz.platform)
        (jazz.settings)
        (jazz.snapshot)
        (jazz.tree)
        (jazz.view)
        (jazz.window)
        (jiri)
        (jiri.base)
        (jiri.manage)
        (jiri.monitor)
        (jiri.remote)
        (jiri.settings)
        (jiri.structure)
        (jiri.task)
        (jiri.view)
        (jiri.window)
        (jiri.work))


;; MAC
;; Contents
;; - App
;;   - update.app
;;     - Contents
;;       - Libraries
;;       - MacOS
;;         - .jas
;;         - Together (update)
;;       - Resources
;;   - together.app
;;     - Contents
;;       - Libraries
;;       - MacOS
;;         - .jas
;;         - Together (app)
;;       - Resources
;; - Libraries
;; - MacOS
;;   - Together (launch)
;; - Resources
;; - Worlds
;;   - together
;;     - .jas

;; WINDOWS
;; Together (launch)
;; lib
;; sirius
;; - current
;; - sirius-install
;;   - .jas
;; worlds
;; - together
;;   - .jas
;; together (why not app)
;; - test
;;   - Together (app)
;;     - .jas


(define stage
  #f)


(define (jiri-prepare)
  (define (inside-installer?)
    (cond-expand
      (mac
       (and kernel-bundle-root
            (let ((root (new Directory (tokenise-filename kernel-bundle-root))))
              (and (filename=? (get-name root) "Update.app")
                   (let ((apps (get-parent root)))
                     (and (filename=? (get-name apps) "Apps")
                          (let ((contents (get-parent apps)))
                            (and (filename=? (get-name contents) "Contents")
                                 (exists? (new-directory contents "Libraries"))
                                 (exists? (new-directory contents "MacOS"))))))))))
      (else
       #f)))
  
  (current-root-dir (string-argument "root-dir" #f))
  (called-from (string-argument "called-from" #f))
  (set! stage (cond ((and (not (current-root-dir))
                          (not (called-from))
                          (not (inside-installer?)))
                     'launch)
                    ((and (current-root-dir)
                          (equal? (called-from) "launch"))
                     'update)
                    (else
                     (system-message "It is incorrect to launch this application"
                                     type: 'problem
                                     title: "Update")
                     (exit 1))))
  (when (eq? stage 'update)
    (set-work-downloaded (integer-argument "work-downloaded" 0))
    (set-window-h (integer-argument "window-h" -1))
    (set-window-v (integer-argument "window-v" -1))
    (set-send-ready? (boolean-argument "send-ready" #f))))


(define (was-update-new?)
  (equal? (string-argument "update-new" "yes") "yes"))


;;;
;;;; Update
;;;


(define (update-at)
  (case stage
    ((launch) (update-at-launch))
    ((update) (update-at-update))))


(define (update-tasks-done)
  (for-each set-done (get-children (get-connection (jiri-update-section)))))


(define (get-transfer-task)
  (let ((section (jiri-transfer-section)))
    (bind (transfer-task) (get-tasks section)
      transfer-task)))


(define (exception-header)
  (if (or (not (file-exists? (app-dir)))
          (not (file-exists? (data-dir))))
      "Failed to install"
    "Failed to update"))


(define update-priority
  -10)


(define (catch-jiri-exception thunk)
  (define (exception-filter exc)
    (snapshot-process exception: exc)
    #t)
  
  (catch (exception-filter exc
           (let ((exception-message (exception-reason exc)))
             (delay-event
               (lambda ()
                 (system-message exception-message
                                 type: 'problem
                                 title: (jiri-application)
                                 header: (exception-header))
                 (exit 1)))
             (sleep +inf.0)))
    (thunk)))


(define first-install?
  #f)

(define (setup-first-install?)
  (set! first-install? (or (not (file-exists? (update-dir)))
                           (not (file-exists? (app-dir)))
                           (not (file-exists? (data-dir))))))


(define (setup-stage-view title color)
  (if first-install?
      (add-stage-view (string-append "Installing " (jiri-title) " for the first time, please be patient") stage-install-color)
    (add-stage-view title stage-ready-color)))


;;;
;;;; At Launch
;;;


(define (update-at-launch)
  (current-root-dir (cond-expand
                      (mac kernel-bundle-root)
                      (else jazz:kernel-install)))
  (setup-first-install?)
  (let ((update-new? (not (file-exists? (update-dir)))))
    (setup-stage-view (string-append "Updating " (jiri-title)) (determine-stage-color (update-dir)))
    (update-crashes-view-color)
    (let ((thread
            (new-thread
              (lambda ()
                (send-crash-reports (jiri-installer-crashes) #f)
                (catch-jiri-exception
                  (lambda ()
                    (pull-repository (jiri-update-section) (update-dir)
                      (lambda (new-content?)
                        (if (cond-expand
                              (local #f)
                              (else new-content?))
                            (delegate-update (current-root-dir) "launch" update-new?)
                          (let ((transfer-task (get-transfer-task)))
                            (set-done transfer-task)
                            (update-app/data
                              (lambda (new-content?)
                                (set! first-install? #f)
                                (launch-app new-content?
                                  (lambda ()
                                    (update-done))))))))
                      cache-repository: (make-root-repository)))))
              'launch)))
      (thread-base-priority-set! thread update-priority)
      (thread-start! thread))))


(definition public (delegate-update root-dir called-from update-new?)
  (let ((arguments
          (build-arguments
            (lambda (add)
              (add "root-dir" root-dir)
              (add "called-from" called-from)
              (add "update-new" (if update-new? "yes" "no"))
              (add "work-downloaded" (number->string (or (calculate-downloaded) 0)))
              (let ((pos (get-position (current-toplevel))))
                (add "window-h" (number->string (get-h pos)))
                (add "window-v" (number->string (get-v pos))))
              (add "send-ready" "true")))))
    (delegate-process (update-exe) arguments: arguments wait-and-quit?: #t)))


(definition (make-root-repository)
  (let ((root (dirname->directory (current-root-dir))))
    (cond-expand
      (mac
       (let ((directory (new-directory root '("Contents" "Resources" ".jas"))))
         (new Associative-Repository root directory: directory)))
      (else
       (new Associative-Repository root)))))

(definition (make-update-repository)
  (new Associative-Repository (dirname->directory (update-dir))))


;;;
;;;; At Update
;;;


(define (update-at-update)
  (setup-first-install?)
  (setup-stage-view (string-append "Updating " (jiri-title)) (if (was-update-new?) stage-setup-color stage-install-color))
  (update-crashes-view-color)
  (update-tasks-done)
  (let ((transfer-task (get-transfer-task)))
    (let ((thread
            (new-thread
              (lambda ()
                (update-launch transfer-task
                  (lambda ()
                    (catch-jiri-exception
                      (lambda ()
                        (update-app/data
                          (lambda (new-content?)
                            (set! first-install? #f)
                            (launch-app new-content?
                              (lambda ()
                                (update-done))))))))))
              'update)))
      (thread-base-priority-set! thread update-priority)
      (thread-start! thread))))


(define (update-launch task cont)
  (let ((update-repository (make-update-repository))
        (root-repository (make-root-repository)))
    (let ((update-index (get-index update-repository))
          (root-index (get-index root-repository)))
      (let ((diff (diff update-repository update-index root-index)))
        (let ((changes (get-added/modified diff)))
          (let ((total (+ (length changes) 1)))
            (set-status task "Updating sirius")
            (set-range task (new Range 0 total))
            (for-each (lambda (change)
                        (bind (what path) change
                          (let ((pathname (tokenise-filename path)))
                            (let ((update-file (new-file (get-working update-repository) pathname))
                                  (root-file (new-file (get-working root-repository) pathname)))
                              (create-directories root-file)
                              (duplicate update-file root-file)
                              (increase-pos task)))))
                      changes)
            (duplicate (get-file update-index) (get-file root-index))
            (increase-pos task)
            (set-done task)
            (cont)))))))


;;;
;;;; Work
;;;


(define (determine-stage-color dir)
  (if (not (file-exists? dir))
      stage-setup-color
    stage-install-color))


(define (update-app/data cont)
  (setup-stage-view "Updating application" (determine-stage-color (app-dir)))
  (update-crashes-view-color)
  (pull-repository (jiri-app-section) (app-dir)
    (lambda (new-app-content?)
      (setup-stage-view (string-append "Updating " (get-title (jiri-data-section))) (determine-stage-color (data-dir)))
      (update-crashes-view-color)
      (pull-repository (jiri-data-section) (data-dir)
        (lambda (new-data-content?)
          (cont (or new-app-content? new-data-content?)))))))


(define (launch-app new-content? cont)
  (let ((section (jiri-splash-section)))
    (bind (task) (get-tasks section)
      (setup-stage-view (if new-content? (jiri-splash-updated) (jiri-splash-uptodate)) stage-ready-color)
      (set-status task "Launching application")
      (set-remaining task (jiri-splash-end))
      (set-range task (new Range 0 (jiri-splash-end)))
      (let ((server-port (open-tcp-server 0)))
        (let ((connection (get-connection (jiri-app-section))))
          (let ((arguments
                  (build-arguments
                    (lambda (add)
                      (add "load-feedback" (number->string (socket-info-port-number (tcp-server-socket-info server-port))))
                      (add "remote-host" (get-host connection))
                      (add "remote-path" (get-path connection))
                      (add "called-from" "installer")))))
            (delegate-process (app-exe) arguments: arguments)))
        (with-exception-catcher
          (lambda (exc)
            (launch-problem))
          (lambda ()
            (declare (proper-tail-calls))
            (let ((port (read server-port)))
              (let (loop (n 0))
                (let ((unit-name (read port)))
                  (cond ((eof-object? unit-name)
                         (launch-problem))
                        ((equal? unit-name '(done))
                         (cont))
                        (else
                         (increase-pos task)
                         (decrease-remaining-if task)
                         (loop (+ n 1)))))))))))))


(define (launch-problem)
  (set-title stage-view "Problem encountered launching application")
  (set-color stage-view stage-error-color)
  (set-cursor :arrow)
  (set-work-done? #t)
  (update-crashes-view-color)
  (send-crash-reports (jiri-application-crashes) #t))


;;;
;;;; Done
;;;


(define (update-done)
  (set-cursor :arrow)
  (set-work-done? #t)
  (update-crashes-view-color)
  (send-crash-reports (jiri-application-crashes) #t)
  (quit-callback))


;;;
;;;; Layout
;;;


(define (jiri-layout)
  (add-pane-view root-view)
  (add-pane-view invite-view)
  (when close-view
    (add-pane-view close-view))
  (when minimize-view
    (add-pane-view minimize-view))
  
  (when (jiri-connections?)
    (add-pane-view connections-view))
  (let ((section (jiri-app-section)))
    (let ((connections (get-connections section))
          (default (get-default section)))
      (if (not connections)
          (let ((connection (get-connection section))
                (tree (locate connections-view 'tree)))
            (add-row tree children: (list (new Tree-Node title: (get-title connection))) user-data: connection)
            (set-single-selection tree 0))
        (assert default)
        (set-connection-change
          (lambda (connection)
            (set-connection (jiri-app-section) connection)))
        (let ((tree (locate connections-view 'tree)))
          (for-each (lambda (connection)
                      (add-row tree children: (list (new Tree-Node title: (get-title connection))) user-data: connection))
                    connections)
          (let ((default-connection (find connections default key: get-title test: equal? return: 'item)))
            (select-user-data-row tree default-connection)))
        (set-connection-change
          (lambda (connection)
            (set-connection (jiri-app-section) connection)
            (unless (get-started? connection)
              (pull-repository (jiri-app-section) (app-dir)
                (lambda (new-content?)
                  ))))))))
  
  (add-crashes-view "" stage-install-color)
  (set-position crashes-view (new Point 500 446))
  (set-position remaining-view (new Point 650 477))
  (set-size progress-view (new Dimension 750 20))
  
  (add-pane-view percentage-view)
  (add-pane-view downloaded-view)
  (add-pane-view status-view)
  (add-pane-view remaining-view)
  (add-pane-view progress-view)
  (set-quit-callback
    (quit-safely)))


;;;
;;;; Init
;;;


(set-jiri-init
  (lambda ()
    (jiri-prepare)
    (jiri-layout)))


;;;
;;;; Startup
;;;


(set-jiri-startup
  (lambda ()
    (update-at))))

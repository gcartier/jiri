;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Jiri Section
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.section jazz


(class Jiri-Section extends Object
  
  
  (slot title       initialize #f getter generate)
  (slot root        initialize #f getter generate)
  (slot directory   initialize #f getter generate)
  (slot part        initialize #f accessors generate)
  ;; quicky not sure this is the right structure
  ;; amongst others because the sequence order is not well
  ;; defined between which is first tasks or connections
  (slot tasks       initialize #f accessors generate)
  (slot connection  initialize #f accessors generate)
  (slot connections initialize #f getter generate)
  (slot default     initialize #f getter generate)
  
  
  (method override (initialize self (title: title #f) (root: root #f) (directory: directory #f) (part: part #f) (tasks: tasks #f) (connection: connection #f) (connections: connections #f) (default: default #f))
    (set! self.title title)
    (set! self.root root)
    (set! self.directory directory)
    (set! self.part part)
    (set! self.tasks tasks)
    (set! self.connection connection)
    (set! self.connections connections)
    (set! self.default default))
  
  
  (method override (print self output readably)
    (print-unreadable self output
      (lambda (output)
        (format output "{s}" title))))
  
  
  (method public (add-task self task)
    (set! tasks (append (or tasks '()) (list task)))
    task)))

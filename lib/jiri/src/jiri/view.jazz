;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; View
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.view jazz


(import (jazz.cairo)
        (jazz.geometry)
        (jazz.io)
        (jazz.splash)
        (jiri.manage)
        (jiri.remote)
        (jiri.settings)
        (jiri.task))


(definition public default-title-font
  '("Tahoma" 60))

(definition public default-stage-font
  '("Tahoma" 20))

(definition public default-label-font
  '("Tahoma" 11))


;;;
;;;; Pane
;;;


(class Jiri-Pane extends Object implements Splashable
  
  
  (slot width                 getter generate)
  (slot height                getter generate)
  (slot views  initialize '() getter generate)
  
  
  (method override (initialize self position size)
    (nextmethod self)
    (set! width (get-width size))
    (set! height (get-height size)))
  
  
  (method public (get-position self)
    (new Point 100 100))
  
  
  (method override (splash-paint self context)
    (paint-background self context)
    (for-each (lambda (view)
                (let ((position (get-position view))
                      (size (get-size view)))
                  (let ((x (cast <fl> (get-h position)))
                        (y (cast <fl> (get-v position)))
                        (width (cast <fl> (get-width size)))
                        (height (cast <fl> (get-height size))))
                    (cairo-identity context)
                    (cairo-translate context x y)
                    (draw view context width height))))
              views))
  
  
  (method override (splash-close self)
    )
  
  
  (method override (splash-mouse-down self x y)
    (let ((pos (new Point (fxround x) (fxround y))))
      (let ((view (find-view self pos)))
        (when view
          (mouse-down view (nu- pos (get-position view)))))))
  
  
  (method override (splash-mouse-move self x y)
    (let ((pos (new Point (fxround x) (fxround y))))
      (let ((view (find-view self pos)))
        (when view
          (mouse-move view (nu- pos (get-position view)))))))
  
  
  (method override (splash-mouse-up self x y)
    (let ((pos (new Point (fxround x) (fxround y))))
      (let ((view (find-view self pos)))
        (when view
          (mouse-up view (nu- pos (get-position view)))))))
  
  
  (method (paint-background self context)
    (cairo-blit context (cache-background))
    (when (jiri-dark-overlay?)
      (let ((stops (list (list 0 0 0 0 0) (list 1 0 0 0 1))))
        (cairo-gradient context 0 200 850 350 stops direction: 'vertical))))
  
  
  (method public (find-view self pos)
    (continuation-capture
      (lambda (return)
        (for-each (lambda (view)
                    (when (in-rect? pos (get-rect view))
                      (continuation-return return view)))
                  views)
        #f)))
  
  
  (method public (add-view self view)
    (set! views (append! views (list view)))))


(definition protected jiri-pane
  #f)

(definition public (setup-jiri-pane position size)
  (set! jiri-pane (new Jiri-Pane position size))
  (splash-set! jiri-pane))


(definition public (add-pane-view view)
  (add-view jiri-pane view)
  (invalidate-view view))


;;;
;;;; View
;;;


(class Jiri-View extends Object
  
  
  (slot title                getter generate)
  (slot position <Point>     getter generate)
  (slot size     <Dimension> getter generate)
  (slot font                 getter generate)
  
  
  (method override (initialize self (title: title #f) (position: position #f) (size: size #f) (font: font #f))
    (nextmethod self)
    (set! self.title title)
    (set! self.position position)
    (set! self.size size)
    (set! self.font font))
  
  
  (method public (set-font self value)
    (set! font value)
    (invalidate-view self))
  
  
  (method public (get-rect self) <Rect>
    (position/size->rect position size))
  
  
  (method public (get-bounds self) <Rect>
    (size-rect size))
  
  
  (method protected virtual (mouse-enter self)
    )
  
  
  (method protected virtual (mouse-leave self)
    )
  
  
  (method protected virtual (mouse-down self pos)
    )
  
  
  (method protected virtual (mouse-move self pos)
    )
  
  
  (method protected virtual (mouse-up self pos)
    )
  
  
  (method protected virtual (draw self context width height)
    (cairo-color context 1 0 0 1)
    (cairo-rect context 0 0 width height))
  
  
  (method public (invalidate-view self)
    (let ((x (get-h position))
          (y (get-v position))
          (width (get-width size))
          (height (get-height size)))
      (splash-invalidate x y width height))))


;;;
;;;; Background
;;;


(definition cached-background
  #f)


(definition public (cache-background)
  (when (not cached-background)
    (let ((background (jiri-background)))
      (assert background
        (set! cached-background (cairo_image_surface_create_from_png (parse background))))))
  cached-background)


(definition public (cache-background-size)
  (let ((background (cache-background)))
    (new Dimension
      (cairo_image_surface_get_width background)
      (cairo_image_surface_get_height background))))


;;;
;;;; Title
;;;


(class Jiri-Title extends Jiri-View
  
  
  (method override (draw self context width height)
    (cairo-color context 1 1 1 1)
    (cairo-font context (first default-title-font) (second default-title-font))
    (cairo-text context 0 0 title)))


;;;
;;;; Label
;;;


(class Jiri-Label extends Jiri-View
  
  
  (slot justification initialize 'head getter generate setter explicit)
  (slot color         initialize #f    getter generate setter explicit)
  
  
  (method override (initialize self . rest)
    (bind-keywords ((justification 'head) (color #f) . others) rest
      (set! self.justification justification)
      (set! self.color color)
      (apply nextmethod self others)))
  
  
  (method public (set-title self value)
    (set! title value)
    (invalidate-view self))
  
  
  (method public (set-justification self value)
    (set! justification value)
    (invalidate-view self))
  
  
  (method public (set-color self value)
    (set! color value)
    (invalidate-view self))
  
  
  (method protected virtual (label-title self)
    title)
  
  
  (method protected virtual (text-color self)
    (or color '(1. 1. 1. 1.)))
  
  
  (method override (draw self context width height)
    (cairo-font context (first font) (second font))
    (let ((title (or (label-title self) "")))
      (let ((pos (justify-lazy (lambda () (cairo-extent context title))
                               (lambda () (get-size self))
                               (list justification 'center)))
            (color (text-color self)))
        (cairo-color context (first color) (second color) (third color) (fourth color))
        (cairo-text context (get-h pos) (get-v pos) title)))))


;;;
;;;; Close
;;;


(class Jiri-Close extends Jiri-View
  
  
  (method override (draw self context width height)
    (let ((left 6)
          (top 6)
          (right (- width 6))
          (bottom (- height 6)))
      (cairo-width context 2)
      (cairo-color context 1 1 1 1)
      (cairo-line context left top right bottom)
      (cairo-line context right top left bottom)))
  
  
  (method override (mouse-up self pos)
    (exit-safely)))


;;;
;;;; Minimize
;;;


(class Jiri-Minimize extends Jiri-View
  
  
  (method override (draw self context width height)
    (let ((left 6)
          (top 6)
          (right (- width 6))
          (bottom (- height 6)))
      (cairo-width context 2)
      (cairo-color context 1 1 1 1)
      (cairo-line context left (- bottom 1) right (- bottom 1))))
  
  
  (method override (mouse-up self pos)
    (splash-minimize)))


;;;
;;;; Progress
;;;


(class Jiri-Progress extends Jiri-View
  
  
  (method override (draw self context width height)
    (cairo-color context 1 1 1 1)
    (cairo-rect context 0 0 width height)
    (let ((left 0)
          (top 0)
          (right width)
          (bottom height))
      (for-each-task-info
        (lambda (task step from to)
          (let ((l (+ left (fxfloor (* width from))))
                (r (+ left (fxceiling (* width to)))))
            (let ((r (+ l (fxceiling (* (- r l) (progress-done task))))))
              (with-cairo-clip context l top (- r l) (- bottom top)
                (lambda ()
                  (cairo-gradient context left top right bottom
                    (list (list 0 .588 0 0 1)
                          (list 1 .863 0 0 1))
                    direction: 'horizontal)))))))))))

;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; View
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.view jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.graphic.image)
        (jazz.jml)
        (jazz.platform)
        (jazz.platform.cairo)
        (jazz.ui)
        (jazz.ui.view)
        (jazz.ui.window)
        (jiri.font)
        (jiri.settings)
        (jiri.window))


(definition public (add-view view)
  (set-parent~ view (first-child~ (current-stage)))
  (invalidate-view~ view))


(definition public (remove-view view)
  (set-parent~ view #f)
  (invalidate-view~ view))
  

;;;
;;;; Background
;;;


(definition cached-background
  #f)


(definition public (cache-background)
  (when (not cached-background)
    (let ((background (jiri-background)))
      (assert background
        (set! cached-background (load-image background)))))
  cached-background)


(definition public (cache-background-size)
  (let ((background (cache-background)))
    (new Dimension
      (cairo_image_surface_get_width background)
      (cairo_image_surface_get_height background))))


;;;
;;;; Root
;;;


(class Jiri-Root extends View
  
  
  (method override (draw surface context)
    (draw-surface~ surface (cache-background) 0 0))
  
  
  (method override (cursor-update evt)
    (set-cursor :arrow)))


;;;
;;;; Title
;;;


(class Jiri-Title extends View
  
  
  (cond-expand
    (windows
     (slot moving? initialize #f getter generate))
    (else))
  
  
  (method override (draw surface context)
    (set-font~ surface default-title-font)
    (draw-text~ surface 0 0 title {Color White}))
  
  
  (cond-expand
    (windows
     @convert
     (method override (cursor-update evt)
       (set-cursor :all))

     @convert
     (method override (mouse-down evt)
       (title-cursor-pos-set! view (cursor-position))
       (title-window-pos-set! view (get-window-position current-window))
       (title-window-size-set! view (get-window-size current-window))
       (title-moving?-set! view #t)
       (SetCapture (window-handle current-window))
       (set-captured-view view)
       (set-lose-capture-callback
         (lambda ()
           (title-moving?-set! view #f))))
     
     @convert
     (method override (mouse-move evt)
       (when (title-moving? view)
         (let ((current (cursor-position)))
           (let ((delta (point- current (title-cursor-pos view))))
             (let ((pos (point+ (title-window-pos view) delta))
                   (size (title-window-size view)))
               (move-window current-window pos size))))))

     @convert
     (method override (mouse-up evt)
       (release-captured-view)))
    (else)))


;;;
;;;; Label
;;;


(class Jiri-Label extends Label-View
  
  
  (form
    (<install> color: {Color White})))


;;;
;;;; Button
;;;


(class Jiri-Button extends View
  
  
  (property action initialize #f accessors generate)
  
  
  (method override (draw surface context)
    (let ((bounds (get-bounds)))
      (if (and enabled? (eq? self (mouse-view)))
          (fill-rect~ surface bounds {Color red: 230 green: 0 blue: 0})
        (gradient-fill~ surface bounds
          (list (list 0 (if enabled? {Color red: 150 green: 0 blue: 0} {Color White}))
                (list 1 (if enabled? {Color red: 220 green: 0 blue: 0} {Color White})))
          direction: 'horizontal)))
    (set-font~ surface default-button-font)
    (when title
      (let ((pos (justify-lazy (lambda () (get-text-extent~ surface title))
                               (lambda () (get-size))
                               'center)))
        (draw-text~ surface (get-h~ pos) (get-v~ pos) title (if enabled? {Color White} {Color red: 160 green: 160 blue: 160})))))
  
  
  (method override (cursor-update evt)
    (set-cursor :arrow))
  
  
  (method override (mouse-enter)
    (invalidate-view))
  
  
  (method override (mouse-leave)
    (invalidate-view))
  
  
  (method override (mouse-up evt)
    (when enabled?
      (process-action self))))


;;;
;;;; Close
;;;


(class Jiri-Close extends Jiri-Button
  
  
  @convert
  (method override (draw surface context)
    (let ((rect (view-rect view))
          (gray (CreatePen PS_SOLID 4 {Color red: 150 green: 150 blue: 150}))
          (white (CreatePen PS_SOLID 2 (if (eq? view (mouse-view)) {Color red: 200 green: 0 blue: 0} {Color red: 255 green: 255 blue: 255}))))
      (let ((left (+ (rect-left rect) 2))
            (top (+ (rect-top rect) 2))
            (right (- (rect-right rect) 2))
            (bottom (- (rect-bottom rect) 2)))
        (define (draw-x pen)
          (SelectObject hdc pen)
          (MoveToEx hdc left top #f)
          (LineTo hdc right bottom)
          (MoveToEx hdc right top #f)
          (LineTo hdc left bottom))
        
        (draw-x gray)
        (draw-x white))
      (DeleteObject gray)
      (DeleteObject white)))
  
  
  (method override (process-action sender (properties (action-properties)))
    (quit-callback)))


;;;
;;;; Minimize
;;;


(class Jiri-Minimize extends Jiri-Button
  
  
  @convert
  (method override (draw surface context)
    (let ((rect (view-rect view))
          (gray (CreatePen PS_SOLID 4 {Color red: 150 green: 150 blue: 150}))
          (white (CreatePen PS_SOLID 2 (if (eq? view (mouse-view)) {Color red: 200 green: 0 blue: 0} {Color red: 255 green: 255 blue: 255}))))
      (let ((left (+ (rect-left rect) 2))
            (top (+ (rect-top rect) 2))
            (right (- (rect-right rect) 2))
            (bottom (- (rect-bottom rect) 2)))
        (define (draw-line pen)
          (SelectObject hdc pen)
          (MoveToEx hdc left bottom #f)
          (LineTo hdc right bottom))
        
        (draw-line gray)
        (draw-line white))
      (DeleteObject gray)
      (DeleteObject white)))
  
  
  (method override (process-action sender (properties (action-properties)))
    @convert (
    (ShowWindow (window-handle current-window) SW_MINIMIZE))))


;;;
;;;; Progress
;;;


(class Jiri-Progress extends View


  (property limits initialize #f accessors generate)
  (property range  initialize #f accessors generate)
  (property pos    initialize #f getter generate setter explicit)
  
  
  (method override (draw surface context)
    (let ((rect (get-bounds)))
      (let ((left (get-left~ rect))
            (top (get-top~ rect))
            (right (get-right~ rect))
            (bottom (get-bottom~ rect)))
        (fill-rect~ surface rect {Color White})
        (let ((start (get-start~ range))
              (end (get-end~ range))
              (width (rect-width rect)))
          (let ((head (if (not limits) 0 (fxfloor (* (get-start~ limits) width))))
                (tail (if (not limits) width (fxceiling (* (get-end~ limits) width))))
                (where (/ (fixnum->flonum (- pos start)) (fixnum->flonum (- end start)))))
            (let ((h (fxceiling (* (- tail head) where)))
                  (from {Color red: 150 green: 0 blue: 0})
                  (to {Color red: 220 green: 0 blue: 0}))
              (gradient-fill~ surface (new Rect left top (+ left head h) bottom)
                (list (list 0 from)
                      (list 1 to))
                direction: 'horizontal)))))))
  
  
  (method (set-info limits range)
    (set! limits~self limits)
    (set! range~self range)
    (set! pos~self (get-start~ range))
    (invalidate-view))
  
  
  (method (set-pos pos)
    (set! pos~self pos)
    (invalidate-view))
  
  
  (method (set-done)
    (set-pos (get-end~ range)))))

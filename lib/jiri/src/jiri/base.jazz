;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Base
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.base jazz


(import (jazz.io))


(native unbound-os-environment-variable-exception?)


;;;
;;;; Environment
;;;


(definition public (getenv-default name #!optional (default #f))
  (with-exception-catcher
    (lambda (exc)
      (if (unbound-os-environment-variable-exception? exc)
          default
        (raise exc)))
    (lambda ()
      (getenv name))))


;;;
;;;; Directory
;;;


(definition public (make-directory dirname)
  (new Directory (list dirname)))


(definition public (normalize-directory directory)
  (if (ends-with? directory "/")
      directory
    (string-append directory "/")))


(definition public (standardize-directory path)
  (substitute #\\ #\/ path))


;;;
;;;; Process
;;;


(definition public (command-arguments)
  (cdr (command-line)))


(definition public (delegate-process path (arguments: arguments '()))
  (define (add-debugger arguments)
    (let ((debugger (command-argument "debugger")))
      (if (not debugger)
          arguments
        (cons "-debugger" (cons debugger arguments)))))
  
  (open-process (list
                  path: path
                  arguments: (add-debugger arguments)
                  stdin-redirection: #f
                  stdout-redirection: #f
                  stderr-redirection: #f
                  show-console: #f))))

;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Base
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.base jazz


(import (jazz.io))


(native unbound-os-environment-variable-exception?)


;;;
;;;; Environment
;;;


(definition public (getenv-default name #!optional (default #f))
  (with-exception-catcher
    (lambda (exc)
      (if (unbound-os-environment-variable-exception? exc)
          default
        (raise exc)))
    (lambda ()
      (getenv name))))


;;;
;;;; File
;;;


(definition public (make-file filename)
  (new File (tokenise-filename filename)))


;;;
;;;; Directory
;;;


(definition public (make-directory dirname)
  (new Directory (tokenise-filename dirname)))


(definition public (normalize-directory directory)
  (if (ends-with? directory "/")
      directory
    (string-append directory "/")))


(definition public (standardize-directory path)
  (substitute #\\ #\/ path))


;;;
;;;; Process
;;;


(definition max-wait
  30)


(definition public (delegate-process path (arguments: arguments '()) (wait-and-exit?: wait-and-exit? #f))
  (define (add-debugger arguments)
    (let ((debugger (command-argument "debugger")))
      (if (not debugger)
          arguments
        (cons "-debugger" (cons debugger arguments)))))
  
  (define (open (redirect?: redirect? #f))
    (open-process (list
                    path: path
                    arguments: (add-debugger arguments)
                    stdin-redirection: redirect?
                    stdout-redirection: redirect?
                    stderr-redirection: redirect?
                    show-console: #f)))
  
  (if (not wait-and-exit?)
      (open redirect?: #f)
    (jazz.window:set-cursor :wait)
    (disable-window~ (jazz.application:get-toplevel))
    (let ((port (open redirect?: #t)))
      (thread-start!
        (new-thread
          (lambda ()
            (input-port-timeout-set! port max-wait)
            (read port)
            (exit))
          'delegate))))))

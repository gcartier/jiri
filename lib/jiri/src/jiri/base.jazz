;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Base
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.base jazz


(import (jazz.io)
        (jazz.window))


;;;
;;;; File
;;;


(definition public (filename->file filename)
  (new File (tokenise-filename filename)))


;;;
;;;; Directory
;;;


(definition public (dirname->directory dirname)
  (new Directory (tokenise-filename dirname)))


(definition public (standardize-directory path)
  (substitute #\\ #\/ path))


;;;
;;;; Process
;;;


(definition max-wait
  30)


(definition public (build-arguments proc)
  (let ((queue (new-queue)))
    (define (add variable value)
      (enqueue queue (string-append "-" variable))
      (enqueue queue value))
    
    (proc add)
    (queue-list queue)))


(definition public (delegate-process path (arguments: arguments '()) (wait-and-quit?: wait-and-quit? #f))
  (define (add-debugger arguments)
    (let ((debugger (command-argument "debugger")))
      (if (not debugger)
          arguments
        (cons "-debugger" (cons debugger arguments)))))
  
  (define (open (redirect?: redirect? #f))
    (open-process (list
                    path: path
                    arguments: (add-debugger arguments)
                    stdin-redirection: redirect?
                    stdout-redirection: redirect?
                    stderr-redirection: redirect?
                    show-console: #f)))
  
  (if (not wait-and-quit?)
      (open redirect?: #f)
    (jazz.window:set-cursor :wait)
    (disable-window (jazz.application:current-toplevel))
    (let ((port (open redirect?: #t)))
      (thread-join!
        (thread-start!
          (new-thread
            (lambda ()
              (input-port-timeout-set! port max-wait)
              (read port))
            'delegate)))
      (quit)))))

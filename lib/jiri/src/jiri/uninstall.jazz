;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Uninstall
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.uninstall jazz


(import (jazz.io)
        (jazz.view)
        (jiri.view)
        (jiri.settings)
        (jiri.window)
        (jiri.work))


;;;
;;;; View
;;;


(define uninstall-view
  (new Jiri-Button
    title: (string-append "Uninstall " (jiri-title))
    position: (new Point 50 450)
    size: (new Dimension 340 40)
    action-handler: (lambda (view)
                      (uninstall))))


;;;
;;;; Uninstall
;;;


(define (uninstall)
  (define (not-found)
    (message-box (string-append (jiri-title) " was not found on this computer.")
                 title: (string-append (jiri-title) " Uninstall")
                 type: 'problem))
  
  #f
  @convert
  (let ((key (registry-open-key (HKEY_CURRENT_USER) (uninstall-subkey))))
    (if (not key)
        (not-found)
      (let ((install-dir (registry-query-string key "InstallLocation")))
        (registry-close-key key)
        (if (not install-dir)
            (not-found)
          (let ((code (message-box (string-append "Remove " (jiri-title) " and all of its components?")
                                   title: (string-append (jiri-title) " Uninstall")
                                   type: 'question)))
            (when (eq? code 'yes)
              (set-cursor :wait)
              (uninstall-desktop-shortcut)
              (uninstall-start-menu)
              (uninstall-uninstall)
              (uninstall-install install-dir)
              (set-cursor :arrow)
              (message-box (string-append (jiri-title) " was successfully removed from your computer.")
                           title: (string-append (jiri-title) " Uninstall"))
              (seppuku-exit))))))))


@convert
(define (uninstall-desktop-shortcut)
  (let ((shortcut (desktop-shortcut)))
    (when (file-exists? shortcut)
      ;; danger
      (delete-file shortcut))))


@convert
(define (uninstall-start-menu)
  (let ((appdir (start-menu-appdir)))
    (when (file-exists? appdir)
      ;; danger
      (remove-directory appdir))))


@convert
(define (uninstall-uninstall)
  (registry-delete-key (HKEY_CURRENT_USER) (uninstall-subkey)))


@convert
(define (uninstall-install install-dir)
  (when (file-exists? install-dir)
    ;; danger
    (let ((code (remove-directory install-dir)))
      (when (/= code 0)
        (message-box (string-append "Unable to delete installation folder (0x" (number->string code 16) "): " install-dir))))))


(define (seppuku-exit)
  (define (generate-remover uninstall remove)
    (call-with-output-file (path-settings path: remove)
      (lambda (output)
        (display ":Repeat" output)
        (newline output)
        (display (string-append "del \"" uninstall "\"") output)
        (newline output)
        (display (string-append "if exist \"" uninstall "\" goto Repeat") output)
        (newline output)
        (display (string-append "del \"" remove "\"") output)
        (newline output)
        (force-output output))))
  
  (exit)
  @convert
  (let ((uninstall (executable-path))
        (remove (get-temporary-file (string-append (jiri-title) " remove") "bat")))
    (generate-remover uninstall remove)
    (create-console-process (string-append "cmd /c \"" remove "\""))
    (exit)))


;;;
;;;; Layout
;;;


(define (layout)
  (add-view root-view)
  (add-view invite-view)
  (when close-view
    (add-view close-view))
  (when minimize-view
    (add-view minimize-view))
  (add-view uninstall-view)
  (set-return-callback
    (lambda ()
      (uninstall)))
  (set-quit-callback
    (lambda ()
      (seppuku-exit))))


;;;
;;;; Init
;;;


(set-init
  (lambda ()
    (layout)))


;;;
;;;; Startup
;;;


(set-startup
  (lambda ()
    ;; (uninstall)
    )))

;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Jiri Application
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.appl jazz


(import (jazz.application)
        (jazz.component)
        (jazz.event)
        (jazz.jml)
        (jazz.platform)
        (jazz.skin)
        (jazz.snapshot)
        (jazz.view)
        (jazz.window)
        (jazz.workspace)
        (jiri.git)
        (jiri.pane)
        (jiri.settings)
        (jiri.structure)
        (jiri.view)
        (jiri.window))


;;;
;;;; Application
;;;


(class Jiri-Application extends Application
  
  
  (method override (process-name)
    "Jiri")
  
  
  (method override (process-email)
    "gucartier@gmail.com")


  (method override (new-toplevel)
    (new Jiri-Toplevel))
  
  
  (method override (prepare-settings)
    (nextmethod)
    (when (jiri-process-name)
      (current-process-name-set! (jiri-process-name)))
    (when (jiri-snapshots-directory)
      (snapshots-directory (jiri-snapshots-directory)))
    (unless kernel-source-accessible?
      (set-exception-debugger (application-exception-debugger))
      (set-exception-hook exception-debugger-hook)))
  
  
  (method override (finish-process)
    (define (setup-toplevel)
      (let ((toplevel (get-toplevel)))
        (when (and (/= window-h -1)
                   (/= window-v -1))
          (set-position~ toplevel (new Point window-h window-v)))
        (set-size~ toplevel (cache-background-size))))
    
    (nextmethod)
    (maximize~ (current-stage))
    (set-jiri-pane (get-guest~ (new-frame Jiri-Pane)))
    (init)
    (setup-toplevel)
    (delay-event startup)
    (when send-ready?
      (write 'ready)
      (newline)
      (force-output)))
  
  
  (method override (install-skins)
    (iterate-skins
      (lambda (name skin)
        (let ((trait (instantiate-trait Skin jiri-look)))
          (set-parent~ trait (local-trait skin 'jazz))
          (set-active-trait~ skin 'default.jazz.jiri)))))
  
  
  (method override (user-notification wparam lparam)
    ;; discard unprocessed application events
    ;; this is necessary on mac to not overload event processing
    (discard-application-events)
    (when notification-callback
      (let ((what wparam)
            (id (signed-loword lparam))
            (result (signed-hiword lparam)))
        (notification-callback what id result)))))


;;;
;;;; Toplevel
;;;


(class Jiri-Toplevel extends Toplevel


  (form
    (<install> position: {Point 100 100} size: {Dimension 800 625}))
  
  
  (method override (effective-title)
    "Jiri"))


(cond-expand
  (cocoa
    (specific (window-resizable? (<Jiri-Toplevel> toplevel) rest)
      #f))
  (windows
    (specific (window-style (<Jiri-Toplevel> toplevel) rest)
      (bitwise-ior WS_CLIPSIBLINGS
                   WS_CLIPCHILDREN
                   WS_POPUP)))
  (else)))

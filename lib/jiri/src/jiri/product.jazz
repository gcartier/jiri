;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Jiri Product
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.product jazz


;;;
;;;; Build
;;;


(cond-expand
  (mac
    (define custom-cc
      "/usr/bin/gcc")
    
    (define custom-cc-options
      '("-O1" "-Wno-unused" "-Wno-write-strings" "-fno-math-errno" "-fno-strict-aliasing" "-fwrapv" "-fomit-frame-pointer" "-fPIC" "-fno-common")))
  (else))


(cond-expand
  (windows
    (define (copy-jiri-files)
      @convert
      (let ((build (%%get-repository-directory jazz:Build-Repository))
            (source jazz:kernel-source))
        (define (build-file path)
          (string-append build path))
        
        (define (source-file path)
          (string-append source path))
        
        (jazz:copy-file (source-file "foreign/windows/libgit2/lib/libgit2.dll") (build-file "libgit2.dll") feedback: jazz:feedback)
        (jazz:copy-file (source-file "foreign/windows/openssl/lib/libeay32.dll") (build-file "libeay32.dll") feedback: jazz:feedback)
        (jazz:copy-file (source-file "foreign/windows/openssl/lib/ssleay32.dll") (build-file "ssleay32.dll") feedback: jazz:feedback))))
  (else
    (define (copy-jiri-files)
      )))


(cond-expand
  (windows
    (define jiri-units
      (let ((git-include-path (quote-jazz-pathname "foreign/windows/libgit2/include"))
            (git-lib-path     (quote-jazz-pathname "foreign/windows/libgit2/lib")))
        `((jiri.platform.windows cc-options: "-DUNICODE -D_WIN32_WINNT=0x0502 -D_WIN32_IE=0x0400" ld-options: "-lgdi32 -lole32 -luuid")
          (jiri.git              cc-options: ,(string-append "-I" git-include-path) ld-options: ,(string-append "-L" git-lib-path " -lgit2"))))))
  (cocoa
    (define jiri-units
      (let ((git-include-path (jazz:quote-jazz-pathname "foreign/mac/libgit2/include"))
            (git-lib-path     (jazz:quote-jazz-pathname "foreign/mac/libgit2/lib")))
        `((jiri.git
            cc-options: ,(string-append "-I" git-include-path)
            ld-options: ,(string-append "-L" git-lib-path " -framework Cocoa -lgit2.22")
            custom-cc: ,custom-cc
            custom-cc-options: ,custom-cc-options
            output-language: objc)))))
  (else
    (define jiri-units
      '())))


(definition (build descriptor (unit: unit #f) (force?: force? #f))
  (let ((unit-specs jiri-units))
    (if (or (not unit) (assq unit unit-specs))
        (custom-compile/build unit-specs unit: unit pre-build: copy-jiri-files force?: force?))
    (if (or (not unit) (not (assq unit unit-specs)))
        (build-product-descriptor descriptor unit: unit force?: force?))))


;;;
;;;; Register
;;;


(register-product 'jiri
  build: build))

;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Git
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.git jazz


(import (jazz.foreign)
        (jazz.git.foreign)
        (jazz.git.syntax (phase syntax))
        (jazz.platform)
        (jazz.platform.types))


(c-include "<git2.h>")


;;;
;;;; Error
;;;


(c-definition (git-check-error error-code) (int) void "git_check_error" ""
  (when (not (= error-code 0))
    (throw (let ((err (giterr-last)))
             (if err
                 (new Git-Exception error-code (git-error-message err))
               (new Git-Exception error-code #f))))))


;;;
;;;; Thread
;;;


(c-declare jiri.git #/C/
    HANDLE ghMutex = NULL;
    HWND remoteHwnd = NULL;
    BOOL quitRequested = FALSE;
    
    #define DOWNLOAD_PROGRESS 0
    #define DOWNLOAD_DONE     1
    #define CHECKOUT_PROGRESS 2
    #define CHECKOUT_DONE     3
    #define UPDATING_GAME     5
//#)


(c-enumerant DOWNLOAD_PROGRESS)
(c-enumerant DOWNLOAD_DONE)
(c-enumerant CHECKOUT_PROGRESS)
(c-enumerant CHECKOUT_DONE)
(c-enumerant UPDATING_GAME)


(git-external (git-request-quit) void
  #/C/
    if (! ghMutex)
        ghMutex = CreateMutex(NULL, FALSE, NULL);
    WaitForSingleObject(ghMutex, INFINITE);
    quitRequested = TRUE;
    ReleaseMutex(ghMutex);
//#)


;;;
;;;; Checkout
;;;


(c-declare jiri.git #/C/
    git_repository* checkout_repository = NULL;
    git_tree* checkout_tree = NULL;
    
    char* checkout_path = NULL;
    size_t checkout_completed_steps = 0;
    size_t checkout_total_steps = 0;
//#)

(git-external (git-checkout-path) char-string
  #/C/
    WaitForSingleObject(ghMutex, INFINITE);
    ___result = checkout_path;
    ReleaseMutex(ghMutex);
//#)

(git-external (git-checkout-completed-steps) int
  #/C/
    WaitForSingleObject(ghMutex, INFINITE);
    ___result = checkout_completed_steps;
    ReleaseMutex(ghMutex);
//#)

(git-external (git-checkout-total-steps) int
  #/C/
    WaitForSingleObject(ghMutex, INFINITE);
    ___result = checkout_total_steps;
    ReleaseMutex(ghMutex);
//#)

(c-declare jiri.git #/C/
    void checkout_callback(const char *path, size_t completed_steps, size_t total_steps, void *payload)
    {
        WaitForSingleObject(ghMutex, INFINITE);
        checkout_path = (char*) path;
        checkout_completed_steps = completed_steps;
        checkout_total_steps = total_steps;
        ReleaseMutex(ghMutex);
        PostMessage(remoteHwnd, WM_USER, CHECKOUT_PROGRESS, 0);
    }

    DWORD WINAPI checkout_head_proc(LPVOID lpParam)
    {
        git_checkout_options options = GIT_CHECKOUT_OPTIONS_INIT;
        options.checkout_strategy = GIT_CHECKOUT_FORCE;
        options.progress_cb = checkout_callback;
        int result = git_checkout_head(checkout_repository, &options);
        PostMessage(remoteHwnd, WM_USER, CHECKOUT_DONE, result);
        return 0;
    }
//#)

(git-external (git-checkout-head-force-threaded git_repository* HWND) HANDLE
  #/C/
    if (! ghMutex)
        ghMutex = CreateMutex(NULL, FALSE, NULL);
    remoteHwnd = ___arg2;
    checkout_repository = ___arg1;
    ___result = CreateThread(NULL, 0, &checkout_head_proc, 0, 0, NULL);
//#)


;;;
;;;; Remote
;;;


(c-declare jiri.git #/C/
    unsigned int total_objects = 0;
    unsigned int received_objects = 0;
    size_t received_bytes = 0;
//#)

(git-external (git-remote-download-total-objects) int
  #/C/
    WaitForSingleObject(ghMutex, INFINITE);
    ___result = total_objects;
    ReleaseMutex(ghMutex);
//#)

(git-external (git-remote-download-received-objects) int
  #/C/
    WaitForSingleObject(ghMutex, INFINITE);
    ___result = received_objects;
    ReleaseMutex(ghMutex);
//#)

(git-external (git-remote-download-received-bytes) int
  #/C/
    WaitForSingleObject(ghMutex, INFINITE);
    ___result = received_bytes;
    ReleaseMutex(ghMutex);
//#)

(c-declare jiri.git #/C/
    int remote_download_callback(const git_transfer_progress *stats, void *payload)
    {
        BOOL quit;
      
        WaitForSingleObject(ghMutex, INFINITE);
        quit = quitRequested;
        total_objects = stats->total_objects;
        received_objects = stats->received_objects;
        received_bytes = stats->received_bytes;
        ReleaseMutex(ghMutex);
        if (! quit)
        {
            PostMessage(remoteHwnd, WM_USER, DOWNLOAD_PROGRESS, 0);
            return 0;
        }
        else
            return -1;
    }

    DWORD WINAPI remote_download_proc(LPVOID lpParam)
    {
        int result = git_remote_download((git_remote*) lpParam, NULL);
        PostMessage(remoteHwnd, WM_USER, DOWNLOAD_DONE, result);
        return 0;
    }
//#)

(git-external (git-remote-download-threaded git_remote* HWND) HANDLE
  #/C/
    if (! ghMutex)
        ghMutex = CreateMutex(NULL, FALSE, NULL);
    remoteHwnd = ___arg2;
    ___result = CreateThread(NULL, 0, &remote_download_proc, ___arg1, 0, NULL);
//#))

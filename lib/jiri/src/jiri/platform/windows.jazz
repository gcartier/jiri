;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Windows
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module protected jiri.platform.windows jazz


(import (jazz.foreign (phase syntax))
        (jazz.platform)
        (jazz.platform.types)
        (jazz.view))


(c-include "<shlobj.h>")
(c-include "<accctrl.h>")
(c-include "<aclapi.h>")


(c-enumerant CSIDL_DESKTOPDIRECTORY)
(c-enumerant CSIDL_STARTMENU)
(c-enumerant CSIDL_PROGRAM_FILESX86)


(c-external (get-special-folder int) wchar_t-string
  #/C/
    wchar_t szDir[MAX_PATH];
    SHGetSpecialFolderPathW(0, szDir, ___arg1, FALSE);
    ___result = szDir;
//#)


;;;
;;;; Directory
;;;


(c-external (create-directory-with-acl-internal wchar_t-string) BOOL
  #/C/
    LPCTSTR lpPath = (LPCTSTR) ___arg1;
    
    if (!CreateDirectory(lpPath, NULL))
    {
        ___result = FALSE;
        return;
    }

    HANDLE hDir = CreateFile(lpPath, READ_CONTROL|WRITE_DAC, 0, NULL, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, NULL);
    if (hDir == INVALID_HANDLE_VALUE)
    {
        ___result = FALSE;
        return exit;
    }

    ACL* pOldDACL;
    SECURITY_DESCRIPTOR* pSD = NULL;
    GetSecurityInfo(hDir, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION, NULL, NULL, &pOldDACL, NULL, &pSD);

    PSID pSid = NULL;
    SID_IDENTIFIER_AUTHORITY authNt;
    authNt = SECURITY_NT_AUTHORITY;
    AllocateAndInitializeSid(&authNt, 2, SECURITY_BUILTIN_DOMAIN_RID, DOMAIN_ALIAS_RID_USERS, 0, 0, 0, 0, 0, 0, &pSid);

    EXPLICIT_ACCESS ea={0};
    ea.grfAccessMode = GRANT_ACCESS;
    ea.grfAccessPermissions = GENERIC_ALL;
    ea.grfInheritance = CONTAINER_INHERIT_ACE|OBJECT_INHERIT_ACE;
    ea.Trustee.TrusteeType = TRUSTEE_IS_GROUP;
    ea.Trustee.TrusteeForm = TRUSTEE_IS_SID;
    ea.Trustee.ptstrName = (LPTSTR)pSid;

    ACL* pNewDACL = 0;
    SetEntriesInAcl(1, &ea, pOldDACL, &pNewDACL);

    if (pNewDACL)
        SetSecurityInfo(hDir, SE_FILE_OBJECT, DACL_SECURITY_INFORMATION, NULL, NULL, pNewDACL, NULL);

    FreeSid(pSid);
    LocalFree(pNewDACL);
    LocalFree(pSD);
    // No clue why this will sometimes crash like on E:/Dawn
    // LocalFree(pOldDACL);
    CloseHandle(hDir);
    
    ___result = TRUE;
//#)


(definition public (create-directory-with-acl dir)
  (when (not (create-directory-with-acl-internal dir))
    (message-box (format "Unable to create directory: {a}" dir))
    (exit 1)))


(c-external (remove-directory wchar_t-string) int
  #/C/
    LPCWSTR lpszDir = ___arg1;
    int len = wcslen(lpszDir);
    wchar_t* pszFrom = (wchar_t*) malloc(sizeof(wchar_t) * (len+2));
    wcscpy(pszFrom, lpszDir);
    pszFrom[len] = 0;
    pszFrom[len+1] = 0;
    
    SHFILEOPSTRUCT fileop;
    fileop.hwnd   = NULL;    // no status display
    fileop.wFunc  = FO_DELETE;  // delete operation
    fileop.pFrom  = pszFrom;  // source file name as double null terminated string
    fileop.pTo    = NULL;    // no destination needed
    fileop.fFlags = FOF_NOCONFIRMATION | FOF_SILENT;  // do not prompt the user
    fileop.fAnyOperationsAborted = FALSE;
    fileop.lpszProgressTitle     = NULL;
    fileop.hNameMappings         = NULL;
    
    int ret = SHFileOperation(&fileop);
    free(pszFrom);
    
    ___result = ret;
//#)


;;;
;;;; Shortcut
;;;


(c-external (create-shortcut wchar_t-string wchar_t-string wchar_t-string wchar_t-string) int
  #/C/
    ___result = 0;
    
    /* // need to convert code to C++
    HRESULT hres;
    IShellLink* psl;
    
    hres = CoCreateInstance(&CLSID_ShellLink, NULL, CLSCTX_INPROC_SERVER, &IID_IShellLink, (void **) &psl);
    if (SUCCEEDED(hres))
    {
        IPersistFile* ppf;

        hres = psl->lpVtbl->QueryInterface(psl, &IID_IPersistFile, (void **) &ppf);
        if (SUCCEEDED(hres))
        {
            hres = psl->lpVtbl->SetPath(psl, ___arg1);
            if (___arg2)
                psl->lpVtbl->SetArguments(psl, ___arg2);
            psl->lpVtbl->SetDescription(psl, ___arg4);
            psl->lpVtbl->SetIconLocation(psl, ___arg1, 0);
            if (SUCCEEDED(hres))
            {
                hres=ppf->lpVtbl->Save(ppf, ___arg3, TRUE);
            }
            ppf->lpVtbl->Release(ppf);
        }
        psl->lpVtbl->Release(psl);
    }
    
    ___result = hres;
    */
//#))

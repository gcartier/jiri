;;;==============
;;;  JazzScheme
;;;==============
;;;
;;;; Window
;;;
;;;  The contents of this file are subject to the Mozilla Public License Version
;;;  1.1 (the "License"); you may not use this file except in compliance with
;;;  the License. You may obtain a copy of the License at
;;;  http://www.mozilla.org/MPL/
;;;
;;;  Software distributed under the License is distributed on an "AS IS" basis,
;;;  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
;;;  for the specific language governing rights and limitations under the
;;;  License.
;;;
;;;  The Original Code is JazzScheme.
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2014
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  Alternatively, the contents of this file may be used under the terms of
;;;  the GNU General Public License Version 2 or later (the "GPL"), in which
;;;  case the provisions of the GPL are applicable instead of those above. If
;;;  you wish to allow use of your version of this file only under the terms of
;;;  the GPL, and not to allow others to use your version of this file under the
;;;  terms of the MPL, indicate your decision by deleting the provisions above
;;;  and replace them with the notice and other provisions required by the GPL.
;;;  If you do not delete the provisions above, a recipient may use your version
;;;  of this file under the terms of any one of the MPL or the GPL.
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.window jazz


(import (jazz.platform)
        (jazz.system))


;;;
;;;; Startup
;;;


(definition public startup
  #f)

(definition public (set-startup thunk)
  (set! startup thunk))


;;;
;;;; Run
;;;


(define window-h
  -1)

(define window-v
  -1)


;;;
;;;; Modal
;;;


(define delayed-modal-user-event
  #f)

(definition public (delay-modal-user-event wparam lparam)
  (set! delayed-modal-user-event (cons wparam lparam)))


(definition public (with-modal thunk)
  (let ((code (thunk)))
    (when delayed-modal-user-event
      (let ((wparam (car delayed-modal-user-event))
            (lparam (cdr delayed-modal-user-event)))
        (set! delayed-modal-user-event #f)
        (PostMessage (get-handle~ (get-toplevel)) WM_USER wparam lparam)))
    code))


;;;
;;;; User
;;;


(definition public user-callback
  #f)

(definition public (set-user-callback callback)
  (set! user-callback callback))


;;;
;;;; Return
;;;


(definition public return-callback
  #f)

(definition public (set-return-callback callback)
  (set! return-callback callback))


;;;
;;;; Quit
;;;


(definition public quit-callback
  #f)

(definition public (set-quit-callback callback)
  (set! quit-callback callback)))

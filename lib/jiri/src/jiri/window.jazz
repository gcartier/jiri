;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Window
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.window jazz


(import (jazz.platform)
        (jazz.system))


;;;
;;;; Init
;;;


(definition public init
  #f)

(definition public (set-init thunk)
  (set! init thunk))


;;;
;;;; Startup
;;;


(definition public startup
  #f)

(definition public (set-startup thunk)
  (set! startup thunk))


;;;
;;;; Window
;;;


(definition public window-h
  -1)

(definition public window-v
  -1)

(definition public (set-window-h h)
  (set! window-h h))

(definition public (set-window-v v)
  (set! window-v v))


;;;
;;;; Modal
;;;


(define delayed-modal-user-event
  #f)

(definition public (delay-modal-user-event what result)
  (set! delayed-modal-user-event (cons what result)))


(cond-expand
  (windows
    (definition public (with-modal thunk)
      (let ((code (thunk)))
        (when delayed-modal-user-event
          (let ((what (car delayed-modal-user-event))
                (result (cdr delayed-modal-user-event)))
            (set! delayed-modal-user-event #f)
            (PostMessage (get-handle~ (get-toplevel)) WM_USER what result)))
        code)))
  (else
    (definition public (with-modal thunk)
      (thunk))))


;;;
;;;; Notification
;;;


(definition public notification-callback
  #f)

(definition public (set-notification-callback callback)
  (set! notification-callback callback))


;;;
;;;; Return
;;;


(definition public return-callback
  #f)

(definition public (set-return-callback callback)
  (set! return-callback callback))


;;;
;;;; Quit
;;;


(definition public quit-callback
  #f)

(definition public (set-quit-callback callback)
  (set! quit-callback callback)))

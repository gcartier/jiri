;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Window
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.window jazz


;;;
;;;; Init
;;;


(definition public jiri-init
  #f)

(definition public (set-jiri-init thunk)
  (set! jiri-init thunk))


;;;
;;;; Startup
;;;


(definition public jiri-startup
  #f)

(definition public (set-jiri-startup thunk)
  (set! jiri-startup thunk))


;;;
;;;; Window
;;;


(definition public window-h
  -1)

(definition public window-v
  -1)

(definition public (set-window-h h)
  (set! window-h h))

(definition public (set-window-v v)
  (set! window-v v))


;;;
;;;; Modal
;;;


(define delayed-modal-user-event
  #f)

(definition public (delay-modal-user-event id what result)
  (set! delayed-modal-user-event (list id what result)))


(cond-expand
  (windows
    (definition public (with-modal thunk)
      (thunk)
      @convert
      (let ((code (thunk)))
        (when delayed-modal-user-event
          (bind (id what result) delayed-modal-user-event
            (set! delayed-modal-user-event #f)
            (PostMessage (get-handle (current-toplevel)) WM_USER id what result)))
        code)))
  (else
    (definition public (with-modal thunk)
      (thunk))))


;;;
;;;; Notification
;;;


(definition public notification-callback
  #f)

(definition public (set-notification-callback callback)
  (set! notification-callback callback))


;;;
;;;; Return
;;;


(definition public return-callback
  #f)

(definition public (set-return-callback callback)
  (set! return-callback callback))


;;;
;;;; Quit
;;;


(definition public quit-callback
  #f)

(definition public (set-quit-callback callback)
  (set! quit-callback callback)))

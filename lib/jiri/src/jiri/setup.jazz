;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Setup
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2018
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.setup jazz


@CONVERT (
(import (jazz.io)
        (jazz.git.interface)
        (jazz.skin)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.view)
        (jazz.window)
        (jiri)
        (jiri.base)
        (jiri.git)
        (jiri.platform)
        (jiri.settings)
        (jiri.structure)
        (jiri.view)
        (jiri.window)
        (jiri.work))


;;;
;;;; View
;;;


(define setup-view
  (new Jiri-Button
    title: (string-append "Install " (jiri-title))
    position: (new Point 50 450)
    size: (new Dimension 340 40)
    action-handler: (lambda (view)
                      (setup))))


;;;
;;;; Setup
;;;


(define (setup)
  (when (setup-root)
    (continuation-capture
      (lambda (cancel)
        (validate-password cancel)
        (remove-pane-view setup-view)
        (add-stage-view "Setup in progress" stage-setup-color)
        (add-view percentage-view)
        (add-view downloaded-view)
        (add-view status-view)
        (add-view remaining-view)
        (add-view progress-view)
        (add-view play-view)
        (setup-work)))))


;;;
;;;; Root
;;;


(define choosen-dir
  #f)


(cond-expand
  (windows
   (define (setup-root)
     (define (choose-dir)
       (let ((dir (parse (choose-directory title: "Please select the installation folder" selected-directory: (make-directory (or choosen-dir (get-special-folder CSIDL_PROGRAM_FILESX86)))))))
         (unless (equal? dir "")
           (set! choosen-dir dir)
           (normalize-directory (standardize-directory dir)))))
     
     (let ((dir (choose-dir)))
       (and dir
            (let ((root-dir (normalize-directory (string-append dir (jiri-title)))))
              (if (not (file-exists? root-dir))
                  (begin
                    (create-directory-with-acl root-dir)
                    (current-root-dir root-dir)
                    root-dir)
                (let ((code (if (current-root-dir)
                                'yes
                              (message-box (string-append "Installation folder already exists: " root-dir "\n\nDo you want to replace?") type: 'confirmation))))
                  (and (eq? code 'yes)
                       (begin
                         (set-cursor :wait)
                         ;;convert-to-task(set-work-in-progress? #t)
                         ;; danger
                         (let ((code (remove-directory root-dir)))
                           (if (= code 0)
                               (begin
                                 (create-directory-with-acl root-dir)
                                 (current-root-dir root-dir)
                                 root-dir)
                             (begin
                               (set-cursor :arrow)
                               ;;convert-to-task(set-work-in-progress? #f)
                               (message-box (string-append "Unable to delete installation folder (0x" (number->string code 16) ")"))
                               #f))))))))))))
  (else
   (define (setup-root)
     )))


;;;
;;;; Password
;;;


(define (validate-password cancel)
  (or (current-password)
      (let ((repo #f)
            (remote #f)
            (successful? #f)
            (dir (install-dir))
            (connection (get-connection (jiri-install-section))))
        (dynamic-wind
          (lambda ()
            (set! repo (git-repository-init dir))
            (set! remote (git-remote-create repo "origin" (get-url connection))))
          (lambda ()
            (git-remote-connect-with-retries connection remote cancel))
          (lambda ()
            (when remote
              (when successful?
                (git-remote-disconnect remote))
              (git-remote-free remote))
            (when repo
              (git-repository-free repo)))))))


;;;
;;;; Work
;;;


(define (setup-work)
  (pull-repository (jiri-install-section) (current-password) (install-dir)
    (lambda (new-content?)
      (setup-done))))


;;;
;;;; Done
;;;


(define (setup-done)
  (set-title stage-view "Setup successful!")
  (set-color stage-view stage-install-color)
  (set-cursor :arrow)
  (set-work-done? #t)
  (delegate-install (current-root-dir) (current-password) "setup"))


;;;
;;;; Layout
;;;


(define (jiri-layout)
  (add-view root-view)
  (add-view invite-view)
  (when close-view
    (add-view close-view))
  (when minimize-view
    (add-view minimize-view))
  (add-view setup-view)
  (set-return-callback
    (lambda ()
      (unless work-done?
        (setup))))
  (set-quit-callback
    (quit-confirm-abort "Setup")))


;;;
;;;; Init
;;;


(set-jiri-init
  (lambda ()
    (jiri-layout)))


;;;
;;;; Startup
;;;


(set-jiri-startup
  (lambda ()
    ))))

;;;==============
;;;  JiriScheme
;;;==============
;;;
;;;; Setup
;;;
;;;  The Initial Developer of the Original Code is Guillaume Cartier.
;;;  Portions created by the Initial Developer are Copyright (C) 1996-2015
;;;  the Initial Developer. All Rights Reserved.
;;;
;;;  Contributor(s):
;;;
;;;  See www.jazzscheme.org for details.


(module jiri.setup jazz


(import (jazz.geometry)
        (jazz.graphic)
        (jazz.git.interface)
        (jazz.io)
        (jazz.ui)
        (jazz.ui.dialog)
        (jazz.ui.skin)
        (jazz.ui.view)
        (jazz.ui.window)
        (jiri.base)
        (jiri.git)
        (jiri.git-interface)
        (jiri.platform)
        (jiri.settings)
        (jiri.structure)
        (jiri.view)
        (jiri.window)
        (jiri.work))


(define TEST?
  #t)


;;;
;;;; View
;;;


(define setup-view
  (new Jiri-Button
    title: (string-append "Install " (jiri-title))
    position: (new Point 50 450)
    size: (new Dimension 340 40)
    action-handler: (lambda (view)
                      (setup))))


;;;
;;;; Setup
;;;


(define (setup)
  (when (setup-root)
    (continuation-capture
      (lambda (cancel)
        (validate-password cancel)
        (remove-view setup-view)
        (add-view percentage-view)
        (add-view downloaded-view)
        (add-view status-view)
        (add-view remaining-view)
        (add-view progress-view)
        (add-view play-view)
        (add-stage-view "Setup in progress" stage-setup-color)
        (update-percentage)
        (setup-work)))))


;;;
;;;; Root
;;;


(define choosen-dir
  #f)


(define (setup-root)
  (define (choose-dir)
    (let ((dir (parse~ (parameterize ((current-skin (new Jazz-Skin))) (choose-directory title: "Please select the installation folder" initial-directory: (if (and TEST? kernel-source-accessible?) {Directory "C:" "App"} (make-directory (or choosen-dir (get-special-folder CSIDL_PROGRAM_FILESX86)))))))))
      (unless (equal? dir "")
        (set! choosen-dir dir)
        (normalize-directory (standardize-directory dir)))))
  
  (let ((dir (choose-dir)))
    (when dir
      (let ((root-dir (normalize-directory (string-append dir (jiri-title)))))
        (if (not (file-exists? root-dir))
            (begin
              (create-directory-with-acl root-dir)
              (current-root-dir root-dir)
              root-dir)
          (let ((code (if (current-root-dir)
                          'yes
                        (message-box (string-append "Installation folder already exists: " root-dir "\n\nDo you want to replace?") type: 'confirmation))))
            (when (eq? code 'yes)
              (set-cursor :wait)
              (set-work-in-progress? #t)
              ;; danger
              (let ((code (remove-directory root-dir)))
                (if (= code 0)
                    (begin
                      (create-directory-with-acl root-dir)
                      (current-root-dir root-dir)
                      root-dir)
                  (begin
                    (set-cursor :arrow)
                    (set-work-in-progress? #f)
                    (message-box (string-append "Unable to delete installation folder (0x" (number->string code 16) ")"))
                    #f))))))))))


;;;
;;;; Password
;;;


(define (validate-password cancel)
  (or (current-password)
      (let ((repo #f)
            (remote #f)
            (successful? #f)
            (dir (install-dir)))
        (dynamic-wind
          (lambda ()
            (set! repo (git-repository-init dir))
            (set! remote (git-remote-create repo "origin" (jiri-install-remote))))
          (lambda ()
            (git-remote-connect-with-retries remote cancel))
          (lambda ()
            (when remote
              (when successful?
                (git-remote-disconnect remote))
              (git-remote-free remote))
            (when repo
              (git-repository-free repo)))))))


;;;
;;;; Work
;;;


(define (setup-work)
  (pull-repository "launch" (jiri-install-remote) (jiri-install-branch) (current-password) (install-dir) 1 6 0. .05 .1
    (lambda (new-content?)
      (setup-done))))


;;;
;;;; Done
;;;


(define (setup-done)
  (set-title~ stage-view "Setup successful!")
  (set-color~ stage-view stage-install-color)
  (set-cursor :arrow)
  (set-work-in-progress? #f)
  (set-work-done? #t)
  (delegate-install (current-root-dir) (current-password) "setup"))


;;;
;;;; Layout
;;;


(define (layout)
  (add-view root-view)
  (add-view invite-view)
  (when close-view
    (add-view close-view))
  (when minimize-view
    (add-view minimize-view))
  (add-view setup-view)
  (set-return-callback
    (lambda ()
      (unless work-done?
        (setup))))
  (set-quit-callback
    (quit-confirm-abort "Setup")))


;;;
;;;; Init
;;;


(set-init
  (lambda ()
    (layout)))


;;;
;;;; Startup
;;;


(set-startup
  (lambda ()
    )))
